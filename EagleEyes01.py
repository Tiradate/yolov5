# Form implementation generated from reading ui file 'pyinstaller --onefile --windowed main.pycheck.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from ast import Break
from datetime import *
import json
import os, csv
from os.path import exists
import shutil
import re
import sys
from asyncio.windows_events import NULL
from pathlib import Path
import time
import pymysql
from dotenv import dotenv_values

import cv2
import numpy as np
import torch
from PIL import Image, ImageEnhance

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QDate
from PyQt6.QtGui import QPixmap, QPalette, QTextCharFormat
from PyQt6.QtWidgets import QFileDialog, QMessageBox, QTableWidgetItem, QCalendarWidget, QApplication

#Gen pdf
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import Paragraph


#from tcping import Ping
import socket

FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # YOLOv5 root directory
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

root_p = Path.cwd()
pdfmetrics.registerFont(TTFont('THSarabunNew', str(root_p / 'Font/THSarabunNew.ttf')))

from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
from utils.general import (Profile, check_file, check_img_size, increment_path, non_max_suppression, scale_boxes, xyxy2xywh)
from utils.plots import Annotator, save_one_box
from utils.torch_utils import select_device, smart_inference_mode

class CalendarWidget(QCalendarWidget):
    
    def __init__(self,ui_main_window):
        super().__init__()
        self.ui_main_window = ui_main_window
        self.from_date = None
        self.to_date = None
        self.first_date = ui_main_window.get_FirstDate()
        self.last_date = ui_main_window.get_LastDate()

        self.highlighter_format = QTextCharFormat()
        # get the calendar default highlight setting
        self.highlighter_format.setBackground(self.palette().brush(QPalette.ColorRole.Highlight))
        self.highlighter_format.setForeground(self.palette().color(QPalette.ColorRole.HighlightedText))

        # this will pass selected date value as a QDate object
        self.clicked.connect(self.select_range)

        super().dateTextFormat()

    def highlight_range(self, format):
        if self.from_date and self.to_date:
            d1 = min(self.from_date, self.to_date)
            d2 = max(self.from_date, self.to_date)
            while d1 <= d2:
                self.setDateTextFormat(d1, format)
                d1 = d1.addDays(1)

    def select_range(self, date_value):
        self.highlight_range(QTextCharFormat())

        # check if a keyboard modifier is pressed
        if QApplication.keyboardModifiers() & Qt.KeyboardModifier.ShiftModifier and self.from_date:
            self.to_date = date_value
            self.highlight_range(self.highlighter_format)
        else:
            # required
            self.from_date = date_value
            self.to_date = None 

class knl_que():
    def cal(self, img_copy):
        # Convert to float and divide by 255:
        imgFloat = img_copy.astype(np.float64) / 255.
        # Calculate channel K:
        kChannel = 1 - np.max(imgFloat, axis=2)
        # Convert back to uint 8:
        kChannel = (255 * kChannel).astype(np.uint8)
        #kChannel = knl_que.thd(self, kChannel)
        return kChannel

class VideoThread_1(QThread):
    #pyQT link
    cam1_pixmap_signal = pyqtSignal(np.ndarray)

    @smart_inference_mode()
    def run_predic1(self,
        weights= str(root_p / 'weights/TKKbest.pt'),  # model.pt path(s)
        data= str(root_p / 'data/TKKdata2.yaml'),  # dataset.yaml path
        imgsz=(640, 640),  # inference size (height, width)
        conf_thres=0.5,  # confidence threshold
        iou_thres=0.5,  # NMS IOU threshold
        max_det=3,  # maximum detections per image
        device='0',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
        save_crops=True,  # save cropped prediction boxes
        classes= 48,  # filter by class: --class 0, or --class 0 2 3
        agnostic_nms=False,  # class-agnostic NMS
        augment=False,  # augmented inference
        visualize=False,  # visualize features
        line_thickness=1,  # bounding box thickness (pixels)
        half=False,  # use FP16 half-precision inference
        dnn=False,  # use OpenCV DNN for ONNX inference
        vid_stride = 4,
        trMill = 0,
        tlMill = 0,
        cam1_file_name = '',
        cam1_contL1 = False,
        cam1_contL2 = False,
        cam1_contL3 = False,
        date_name = '',
    ):
        # source from CCTV
        self.source1 = self.adr2
        #self.source1 = 'sampleIn/In01.mp4'

        #save_img = not nosave and not source.endswith('.txt')  # save inference images
        is_file = Path(self.source1).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
        is_url = self.source1.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
        webcam = self.source1.isnumeric() or self.source1.endswith('.txt') or (is_url and not is_file)
        screenshot = self.source1.lower().startswith('screen') 

        if is_url:
            x0 = self.adr1.find(".")
            x1 = self.adr1.find(":", x0)
            x2 = self.adr1.find("/", x1)
            a = self.adr1[x0-3:x1]
            b = self.adr1[x1+1:x2]
            def ping_server(server: str, port: int, timeout=3):
                """ping server"""
                try:
                    socket.setdefaulttimeout(timeout)
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.connect((server, port))
                except OSError as error:
                    return False
                else:
                    s.close()
                    return True
            ping = ping_server(a, int(b))

        else:  ping = True

        while ping:
            try:
                if is_url and is_file:
                    self.source1 = check_file(self.source1)  # download

                # Directories
                project = self.dest+'/Entrance'
                date_name = Ui_MainWindow.log_date
                self.save_dir1 = increment_path(Path(project) / date_name, exist_ok=True)  # increment run
                (self.save_dir1).mkdir(parents=True, exist_ok=True)  # make dir
                
                # Load model
                device = select_device(device)
                model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
                stride, pt = model.stride, model.pt
                imgsz = check_img_size(imgsz, s=stride)  # check image size

                # Dataloader
                if webcam:
                    dataset = LoadStreams(self.source1, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
                elif screenshot:
                    dataset = LoadScreenshots(self.source1, img_size=imgsz, stride=stride, auto=pt)
                else:
                    dataset = LoadImages(self.source1, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
                bs = len(dataset)  # batch_size

                # Run inference
                model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup
                seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
                
                for path, im, im0s, vid_cap, s in dataset:
                    
                    im = torch.from_numpy(im).to(device)
                    im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32
                    im /= 255  # 0 - 255 to 0.0 - 1.0
                    if len(im.shape) == 3:
                        im = im[None]  # expand for batch dim

                    # Inference
                    visualize = increment_path(self.save_dir1 / Path(path).stem, mkdir=True) if visualize else False
                    pred = model(im, augment=augment, visualize=visualize)

                    # NMS
                    pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)

                    # Second-stage classifier (optional)
                    # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

                    # Process predictions
                    for i, det in enumerate(pred):  # per image

                        seen += 1
                        if webcam:  # batch_size >= 1
                            p, im0, frame = path[i], im0s[i].copy(), dataset.count
                            s += f'{i}: '
                        else:
                            p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)
                        
                        # Save non model
                        trMill = int(time.time() * 1000)
                        if cam1_contL1 and (trMill - tlMill > self.entr1):
                            self.cam1_snaps_con1 = (self.save_dir1 / cam1_file_name / str(cam1_file_name+'_snap1')).with_suffix('.jpg')
                            cv2.imwrite(self.cam1_snaps_con1, im0)
                            tlMill1 = int(time.time() * 1000)
                            cam1_contL1 = False
                            cam1_contL2 = True

                        if cam1_contL2 and (trMill - tlMill1 > self.entr2):
                            self.cam1_snaps_con2 = (self.save_dir1 / cam1_file_name / str(cam1_file_name+'_snap2')).with_suffix('.jpg')
                            cv2.imwrite(self.cam1_snaps_con2, im0)
                            cam1_contL2 = False
                            cam1_contL3 = True

                        p = Path(p)  # to Path
                        gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
                        imc = im0.copy() if save_crops else im0  # for save_crop
                        annotator_plate = Annotator(im0, line_width=line_thickness, example="")
                        
                        if len(det):
                            # Rescale boxes from img_size to im0 size
                            det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()

                            # Write results
                            for *xyxy, conf, cls in reversed(det):

                                # Convert xyxy to xywh
                                xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                                annotator_plate.box_label(xyxy, None, color=(255,0,0))
                                ready_snap = False
                                while ( 0.05 < round(xywh[0],5) < 0.4 and ready_snap == False): #and ((0.02*0.03) < (xywh[2]*xywh[3]) < (0.1*0.1))
                                    
                                    if ((cam1_contL3 == True) or (cam1_file_name == '')):
                                        cam1_file_name = datetime.now().strftime('%H%M%S')
                                        (self.save_dir1 / cam1_file_name).mkdir(parents=True, exist_ok=True)  # make dir
                                        cam1_contL3 = False
                                    
                                    file_crops = (self.save_dir1 / cam1_file_name / str(cam1_file_name+'_crop')).with_suffix('.jpg')     
                                    save_one_box(xyxy, imc, file = file_crops, BGR=True)#send crop image to thread 6
                                                                        
                                    if round(xywh[0],5 > 0.4):
                                        ready_snap = True
                                
                                if ( ready_snap == True ):
                                        cam1_contL3 = False
                                        file_snap_adr0 = (self.save_dir1 / cam1_file_name / str(cam1_file_name+'_snap0')).with_suffix('.jpg')
                                        cv2.imwrite(file_snap_adr0, im0)

                                        # Link to pyQT
                                        self.cam1_ocr = ""
                                        self.cam1_snaps = file_snap_adr0
                                        #self.cam1_last_crops = dir_ocr
                                            
                                        # update logger
                                        LogThread_6.date_name = date_name
                                        # LogThread_6.file1_ocr = self.cam1_ocr
                                        LogThread_6.img_path_en = file_crops
                                        LogThread_6.file1_old = cam1_file_name
                                        
                                        # update variable
                                        tlMill = int(time.time() * 1000)
                                        cam1_contL1 = True
                                        VideoThread_3.cam1_snaps_con3 = str(self.save_dir1 / cam1_file_name / cam1_file_name)

                        # Stream results
                        #im0 = annotator_plate.result()
                        self.cam1_pixmap_signal.emit(annotator_plate.result())
            
            except:Break
            else:
                if is_url:
                    ping = ping_server(a, int(b))
                    if ping == False:Break
                    
    def __init__(self):
        super().__init__()
        
        # Load curent config json
        f_conf = open(root_p / 'config/current_conf.json')
        conf = json.load(f_conf)
        f_conf.close()
        self.adr1 = conf["STENadr1"]
        self.adr2 = conf["STENadr2"]

        self.entr1 = int(conf["STENtr1"])
        self.entr2 = int(conf["STENtr2"])
        self.entr3 = int(conf["STENtr3"])
        
        self.dest = conf["STfd"]

        #pyQT link
        self.cam1_last_crops = ''
        self.cam1_snaps = ''
        self.cam1_snaps_con1 = ''
        self.cam1_snaps_con2 = ''
        self.cam1_snaps_con3 = ''
        self.cam1_ocr = ''
        self.ocr_custom_config = r'-l tha --oem 3 --psm 6'#pytesseract -c tessedit_char_whitelist=0123456789
        self.tha_pattern = re.compile(r"[^\u0E00-\u0E2E0-9']")

        self._run_flag = True

    def run(self):
        QThread.sleep(2)
        while self._run_flag:
            self.run_predic1()
            

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class VideoThread_2(QThread):

    #pyQT link
    cam2_pixmap_signal = pyqtSignal(np.ndarray)

    @smart_inference_mode()
    def run_predic2(self,
        weights= str(root_p / 'weights/TKKbest.pt'),  # model.pt path(s)
        data= str(root_p / 'data/TKKdata2.yaml'),  # dataset.yaml path
        imgsz=(640, 640),  # inference size (height, width)
        conf_thres=0.5,  # confidence threshold
        iou_thres=0.5,  # NMS IOU threshold
        max_det=3,  # maximum detections per image
        device='0',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
        save_crops=True,  # save cropped prediction boxes
        classes= 48,  # filter by class: --class 0, or --class 0 2 3
        agnostic_nms=False,  # class-agnostic NMS
        augment=False,  # augmented inference
        visualize=False,  # visualize features
        line_thickness=2,  # bounding box thickness (pixels)
        half=False,  # use FP16 half-precision inference
        dnn=False,  # use OpenCV DNN for ONNX inference
        vid_stride = 4,
        trMill = 0,
        tlMill = 0,
        cam2_file_name = '',
        cam2_contL1 = False,
        cam2_contL2 = False,
        cam2_contL3 = False,
        date_name = ''
    ):
        # source from CCTV
        source2 = self.adr2
        # source2 = 'sampleIn/Out01.mp4'

        #save_img = not nosave and not source.endswith('.txt')  # save inference images
        is_file = Path(source2).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
        is_url = source2.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
        webcam = source2.isnumeric() or source2.endswith('.txt') or (is_url and not is_file)
        screenshot = source2.lower().startswith('screen')

        if is_url:
            x0 = self.adr1.find(".")
            x1 = self.adr1.find(":", x0)
            x2 = self.adr1.find("/", x1)
            a = self.adr1[x0-3:x1]
            b = self.adr1[x1+1:x2]
            def ping_server(server: str, port: int, timeout=3):
                """ping server"""
                try:
                    socket.setdefaulttimeout(timeout)
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.connect((server, port))
                except OSError as error:
                    return False
                else:
                    s.close()
                    return True
            ping = ping_server(a, int(b))

        else:  ping = True

        while ping:
            try:
                if is_url and is_file:
                    source2 = check_file(source2)  # download

                # Directories
                project = self.dest+'/Exit'
                date_name = Ui_MainWindow.log_date
                self.save_dir2 = increment_path(Path(project) / date_name, exist_ok=True)  # increment run
                (self.save_dir2).mkdir(parents=True, exist_ok=True)  # make dir

                # Load model
                device = select_device(device)
                model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
                stride, pt = model.stride, model.pt
                imgsz = check_img_size(imgsz, s=stride)  # check image size

                # Dataloader
                if webcam:
                    dataset = LoadStreams(source2, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
                elif screenshot:
                    dataset = LoadScreenshots(source2, img_size=imgsz, stride=stride, auto=pt)
                else:
                    dataset = LoadImages(source2, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
                bs = len(dataset)  # batch_size

                # Run inference
                model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup
                seen, windows, dt = 0, [], (Profile(), Profile(), Profile())

                for path, im, im0s, vid_cap, s in dataset:

                    im = torch.from_numpy(im).to(device)
                    im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32
                    im /= 255  # 0 - 255 to 0.0 - 1.0
                    if len(im.shape) == 3:
                        im = im[None]  # expand for batch dim

                    # Inference
                    visualize = increment_path(self.save_dir2 / Path(path).stem, mkdir=True) if visualize else False
                    pred = model(im, augment=augment, visualize=visualize)

                    # NMS
                    pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)

                    # Second-stage classifier (optional)
                    # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

                    # Process predictions
                    for i, det in enumerate(pred):  # per image

                        seen += 1
                        if webcam:  # batch_size >= 1
                            p, im0, frame = path[i], im0s[i].copy(), dataset.count
                            s += f'{i}: '
                        else:
                            p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)
                        
                        # Save non model
                        trMill = int(time.time() * 1000)
                        if cam2_contL1 and (trMill - tlMill > self.extr1):
                            self.cam2_snaps_con1 = (self.save_dir2 / cam2_file_name / str(cam2_file_name+'_snap1')).with_suffix('.jpg')
                            cv2.imwrite(self.cam2_snaps_con1, im0)
                            cam2_contL1 = False
                            cam2_contL2 = True

                        if cam2_contL2 and (trMill - tlMill > self.extr2 - self.extr1):
                            self.cam2_snaps_con2 = (self.save_dir2 / cam2_file_name / str(cam2_file_name+'_snap2')).with_suffix('.jpg')
                            cv2.imwrite(self.cam2_snaps_con2, im0)
                            cam2_contL2 = False
                            cam2_contL3 = True
                            
                        p = Path(p)  # to Path
                        gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
                        imc = im0.copy() if save_crops else im0  # for save_crop
                        annotator_plate = Annotator(im0, line_width=line_thickness, example="")
                        
                        if len(det):
                            # Rescale boxes from img_size to im0 size
                            det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()

                            # Write results
                            for *xyxy, conf, cls in reversed(det):

                                # Convert xyxy to xywh
                                xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                                annotator_plate.box_label(xyxy, None, color=(255,0,0))
                                ready_snap = False
                                #print(xywh)
                                while (0.35 < round(xywh[1],5) < 0.4 and ready_snap == False)  : #and ((0.02*0.02) < (xywh[2]*xywh[3]) < (0.1*0.1))
                                    
                                    if ((cam2_contL3 == True) or (cam2_file_name == '')):
                                        cam2_file_name = datetime.now().strftime('%H%M%S')
                                        (self.save_dir2 / cam2_file_name).mkdir(parents=True, exist_ok=True)  # make dir
                                        cam2_contL3 = False
                                        
                                    file_crops = (self.save_dir2 / cam2_file_name / str(cam2_file_name+'_crop')).with_suffix('.jpg')
                                    save_one_box(xyxy, imc, file = file_crops, BGR=True)
                                    
                                    if round(xywh[1],5 > 0.4):
                                        ready_snap = True

                                if ( ready_snap == True ):
                                        cam2_contL3 = False
                                        file_snap_adr0 = (self.save_dir2 / cam2_file_name / str(cam2_file_name+'_snap0')).with_suffix('.jpg')
                                        cv2.imwrite(file_snap_adr0, im0)

                                        # Link to pyQT
                                        self.cam2_ocr = ""
                                        self.cam2_snaps = file_snap_adr0
                                        #self.cam2_last_crops = dir_ocr

                                        # update logger
                                        LogThread_6.date_name = date_name
                                        # LogThread_6.file2_ocr = self.cam2_ocr
                                        LogThread_6.img_path_ex = file_crops
                                        LogThread_6.file2_old = cam2_file_name
                                        
                                        # update variable
                                        tlMill = int(time.time() * 1000)
                                        cam2_contL1 = True
                                        VideoThread_4.cam2_snaps_con3 = str(self.save_dir2 / cam2_file_name / cam2_file_name)

                        # Stream results
                        #im0 = annotator_plate.result()
                        self.cam2_pixmap_signal.emit(annotator_plate.result())
            
            except:Break
            else:
                if is_url:
                    ping = ping_server(a, int(b))
                    if ping == False:Break


    def __init__(self):
        super().__init__()
        
        # Load curent config json
        f_conf = open(root_p / 'config/current_conf.json')
        conf = json.load(f_conf)
        f_conf.close()
        self.adr1 = conf["STEXadr1"]
        self.adr2 = conf["STEXadr2"]
        
        self.extr1 = int(conf["STEXtr1"])
        self.extr2 = int(conf["STEXtr2"])
        self.extr3 = int(conf["STEXtr2"])

        self.dest = conf["STfd"]

        #pyQT link
        self.cam2_last_crops = ''
        self.cam2_snaps = ''
        self.cam2_snaps_con1 = ''
        self.cam2_snaps_con2 = ''
        self.cam2_snaps_con3 = ''
        self.cam2_ocr = ''
        self.ocr_custom_config = r'-l tha --oem 3 --psm 6'#pytesseract -c tessedit_char_whitelist=0123456789
        self.tha_pattern = re.compile(r"[^\u0E00-\u0E2E0-9']")
        
        self._run_flag = True

    def run(self):
        QThread.sleep(3)
        while self._run_flag:
            self.run_predic2()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class VideoThread_3(QThread):
    
    cam3_pixmap_signal = pyqtSignal()

    # Load curent config json
    f_conf = open(root_p / 'config/current_conf.json')
    conf = json.load(f_conf)
    f_conf.close()

    adr3 = conf["STENadr3"]
    #adr3 = 0
    entr3 = int(conf["STENtr3"])
    entr4 = int(conf["STENtr4"])
    entr5 = int(conf["STENtr5"])

    cam1_snaps_con3 = ''
    cam3_snaps_con3 = ''
    cam3_snaps_con3C = ''
    cam3_snaps_con4 = ''
    cam3_snaps_con4C = ''
    cam3_snaps_con5 = ''
    cam3_snaps_con5C = ''

    cam1_contR = 0

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def run(self):
        x0 = self.adr3.find(".")
        x1 = self.adr3.find(":", x0)
        x2 = self.adr3.find("/", x1)
        a = self.adr3[x0-3:x1]
        b = self.adr3[x1+1:x2]
        
        #con3_trig = 0
        #con4_trig = 0

        while self._run_flag:
            is_url = self.adr3.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
            if is_url:
                x0 = self.adr3.find(".")
                x1 = self.adr3.find(":", x0)
                x2 = self.adr3.find("/", x1)
                a = self.adr3[x0-3:x1]
                b = self.adr3[x1+1:x2]
                def ping_server(server: str, port: int, timeout=3):
                    """ping server"""
                    try:
                        socket.setdefaulttimeout(timeout)
                        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        s.connect((server, port))
                    except OSError as error:
                        print(error)
                        return False
                    else:
                        s.close()
                        return True
                ping = ping_server(a, int(b))
            else:  ping = True

            while ping:
                try:
                    #tnMill = int(time.time() * 1000)
                    if (self.cam1_snaps_con3 != self.cam3_snaps_con3C) and (self.cam1_contR == 0):
                        cap = cv2.VideoCapture(self.adr3, 0)
                        while cap.isOpened():
                            ret, frame = cap.read()
                            if not ret:
                                    cap.release()
                                    break
                            self.cam3_snaps_con3 = (Path(self.cam1_snaps_con3+'_snap3')).with_suffix('.jpg')
                            cv2.imwrite(self.cam3_snaps_con3, frame)
                            self.cam3_snaps_con3C = self.cam1_snaps_con3
                            cap.release()
                            break
                        #self.cam1_contR = 2
                        self.cam3_pixmap_signal.emit()
                        #con3_trig = tnMill
                        #QThread.msleep(self.entr4-self.entr3)
                        #if (self.cam3_snaps_con3C != self.cam3_snaps_con4C) and (self.cam1_contR == 2) and ((tnMill - con3_trig) > (self.entr4-self.entr3)):
                        cap = cv2.VideoCapture(self.adr3, 0)
                        while cap.isOpened():
                            ret, frame = cap.read()
                            if not ret:
                                    cap.release()
                                    break
                            self.cam3_snaps_con4 = (Path(self.cam3_snaps_con3C+'_snap4')).with_suffix('.jpg')
                            cv2.imwrite(self.cam3_snaps_con4, frame)
                            self.cam3_snaps_con4C = self.cam3_snaps_con3C
                            cap.release()
                            break
                        #self.cam1_contR = 1
                        self.cam3_pixmap_signal.emit()
                        #con4_trig = tnMill
                        #QThread.msleep(self.entr5-self.entr4)
                        #if (self.cam3_snaps_con4C != self.cam3_snaps_con5C) and (self.cam1_contR == 1) and ((tnMill - con4_trig) > (self.entr5-self.entr4)):
                        cap = cv2.VideoCapture(self.adr3, 0)
                        while cap.isOpened():
                            ret, frame = cap.read()
                            if not ret:
                                    cap.release()
                                    break
                            self.cam3_snaps_con5 = (Path(self.cam3_snaps_con4C+'_snap5')).with_suffix('.jpg')
                            cv2.imwrite(self.cam3_snaps_con5, frame)
                            self.cam3_snaps_con5C = self.cam3_snaps_con4C
                            cap.release()
                            break
                        #self.cam1_contR = 0
                        self.cam3_pixmap_signal.emit()
                    
                    else:
                        QThread.msleep(100)

                except:Break
                else:
                    if is_url:
                        ping = ping_server(a, int(b))
                        if ping == False:Break
      
    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class VideoThread_4(QThread):
    
    cam4_pixmap_signal = pyqtSignal()

    # Load curent config json
    f_conf = open(root_p / 'config/current_conf.json')
    conf = json.load(f_conf)
    f_conf.close()

    adr3 = conf["STEXadr3"]
    #adr3 = 0
    extr3 = int(conf["STEXtr3"])
    extr4 = int(conf["STEXtr4"])
    extr5 = int(conf["STEXtr5"])

    cam2_snaps_con3 = ''
    cam4_snaps_con3 = ''
    cam4_snaps_con3C = ''
    cam4_snaps_con4 = ''
    cam4_snaps_con4C = ''
    cam4_snaps_con5 = ''
    cam4_snaps_con5C = ''

    cam2_contR = 0

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def run(self):

        x0 = self.adr3.find(".")
        x1 = self.adr3.find(":", x0)
        x2 = self.adr3.find("/", x1)
        a = self.adr3[x0-3:x1]
        b = self.adr3[x1+1:x2]
        
        #con3_trig = 0
        #con4_trig = 0

        while self._run_flag:
            is_url = self.adr3.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
            if is_url:
                x0 = self.adr3.find(".")
                x1 = self.adr3.find(":", x0)
                x2 = self.adr3.find("/", x1)
                a = self.adr3[x0-3:x1]
                b = self.adr3[x1+1:x2]
                def ping_server(server: str, port: int, timeout=3):
                    """ping server"""
                    try:
                        socket.setdefaulttimeout(timeout)
                        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        s.connect((server, port))
                    except OSError as error:
                        return False
                    else:
                        s.close()
                        return True
                ping = ping_server(a, int(b))
            else:  ping = True

            while ping:
                try:
                    #tnMill = int(time.time() * 1000)
                    if (self.cam2_snaps_con3 != self.cam4_snaps_con3C) and (self.cam2_contR == 0):
                        cap = cv2.VideoCapture(self.adr3, 0)
                        while cap.isOpened():
                            ret, frame = cap.read()
                            if not ret:
                                cap.release()
                                break
                            self.cam4_snaps_con3 = (Path(self.cam2_snaps_con3+'_snap3')).with_suffix('.jpg')
                            cv2.imwrite(self.cam4_snaps_con3, frame)
                            self.cam4_snaps_con3C = self.cam2_snaps_con3
                            cap.release()
                            break
                        #self.cam2_contR = 2
                        self.cam4_pixmap_signal.emit()
                        #con3_trig = tnMill
                        QThread.msleep(self.extr4-self.extr3)
                        #if (self.cam4_snaps_con3C != self.cam4_snaps_con4C) and (self.cam2_contR == 2) and ((tnMill- con3_trig) > (self.extr4-self.extr3)):
                        cap = cv2.VideoCapture(self.adr3, 0)
                        while cap.isOpened():
                            ret, frame = cap.read()
                            if not ret:
                                cap.release()
                                break
                            self.cam4_snaps_con4 = (Path(self.cam4_snaps_con3C+'_snap4')).with_suffix('.jpg')
                            cv2.imwrite(self.cam4_snaps_con4, frame)
                            self.cam4_snaps_con4C = self.cam4_snaps_con3C
                            cap.release()
                            break
                        #self.cam2_contR = 1
                        self.cam4_pixmap_signal.emit()
                        #con4_trig = tnMill
                        QThread.msleep(self.extr5-self.extr4)
                        #if (self.cam4_snaps_con4C != self.cam4_snaps_con5C) and (self.cam2_contR == 1) and ((tnMill - con4_trig) > (self.extr5-self.extr4)):
                        cap = cv2.VideoCapture(self.adr3, 0)
                        while cap.isOpened():
                            ret, frame = cap.read()
                            if not ret:
                                cap.release()
                                break
                            self.cam4_snaps_con5 = (Path(self.cam4_snaps_con4C+'_snap5')).with_suffix('.jpg')
                            cv2.imwrite(self.cam4_snaps_con5, frame)
                            self.cam4_snaps_con5C = self.cam4_snaps_con4C
                            cap.release()
                            break
                        #self.cam2_contR = 0
                        self.cam4_pixmap_signal.emit()
                    
                    else:
                        QThread.msleep(300)

                except:Break
                else:
                    if is_url:
                        ping = ping_server(a, int(b))
                        if ping == False:Break
      
    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class TimeThread_5(QThread):
    dt_signal = pyqtSignal(str,str)

    def __init__(self):
        super().__init__()
        # Load curent config json
        f_conf = open(root_p / 'config/current_conf.json')
        conf = json.load(f_conf)
        f_conf.close()
        self.adr2EX = conf["STEXadr2"]
        self.adr2EN = conf["STENadr2"]
        self.dest = conf["STfd"]

        self.save_dir = ""

        self._run_flag = True

    def run(self):
        while self._run_flag:
            self.log_date = datetime.now().strftime('%Y.%m.%d')
            self.current_time = datetime.now().strftime('%H:%M:%S')
            self.dt_signal.emit(self.log_date, self.current_time)
            QThread.msleep(1)

            
            if self.current_time == '00:00:09':
                # 30 day keep data
                self.pathA = self.dest+'/Entrance'
                self.pathB = self.dest+'/Exit'
                for list_pathA in os.listdir(self.pathA):
                    y1, m1, d1 = [int(x) for x in list_pathA.split('.')]
                    b1 = date(y1, m1, d1)
                    y2, m2, d2 = [int(x) for x in self.log_date.split('.')]
                    b2 = date(y2, m2-1, d2)
                    if b1<b2:
                        # path
                        pathover = os.path.join(self.pathA, list_pathA)
                        # removing directory
                        shutil.rmtree(pathover)
                for list_pathB in os.listdir(self.pathB):
                    y1, m1, d1 = [int(x) for x in list_pathB.split('.')]
                    b1 = date(y1, m1, d1)
                    y2, m2, d2 = [int(x) for x in self.log_date.split('.')]
                    b2 = date(y2, m2-1, d2)
                    if b1<b2:
                        # path
                        pathover = os.path.join(self.pathB, list_pathB)
                        # removing directory
                        shutil.rmtree(pathover)

                #stop AI process
                self.save_dir1 = increment_path(Path(self.pathA) / self.log_date, exist_ok=True)  # increment run
                (self.save_dir1).mkdir(parents=True, exist_ok=True)  # make dir
                

                QThread.sleep(1)
            
    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class LogThread_6(QThread): # add logger.time to logger
    log_signal = pyqtSignal()

    file1_old = ''
    file1_new = ''
    file1_ocr = ''
    file2_old = ''
    file2_new = ''
    file2_ocr = ''
    date_name = ''
    img_path_en = ''
    img_path_ex = ''
    isMotorcycle_EN = False
    isMotorcycle_EX = False
    
    class_dict = {
    '30': '0',
    '31': '1',
    '32': '2',
    '33': '3',
    '34': '4',
    '35': '5',
    '36': '6',
    '37': '7',
    '38': '8',
    '39': '9',
    'A1': 'ก',
    'A2': 'ข',
    'A3': 'ฃ',
    'A4': 'ค',
    'A5': 'ฅ',
    'A6': 'ฆ',
    'A7': 'ง',
    'A8': 'จ',
    'A9': 'ฉ',
    'AA': 'ช',
    'AB': 'ซ',
    'AC': 'ฌ',
    'AD': 'ญ',
    'AE': 'ฎ',
    'AF': 'ฏ',
    'B0': 'ฐ',
    'B1': 'ฑ',
    'B2': 'ฒ',
    'B3': 'ณ',
    'B4': 'ด',
    'B5': 'ต',
    'B6': 'ถ',
    'B7': 'ท',
    'B8': 'ธ',
    'B9': 'น',
    'BA': 'บ',
    'BB': 'ป',
    'BC': 'ผ',
    'BD': 'ฝ',
    'BE': 'พ',
    'BF': 'ฟ',
    'C0': 'ภ',
    'C1': 'ม',
    'C2': 'ย',
    'C3': 'ร',
    'C4': 'ฤ',
    'C5': 'ล',
    'C6': 'ฦ',
    'C7': 'ว',
    'C8': 'ศ',
    'C9': 'ษ',
    'CA': 'ส',
    'CB': 'ห',
    'CC': 'ฬ',
    'CD': 'อ',
    'CE': 'ฮ'
    }

    def __init__(self, ui_main_window):
        super().__init__()
        self.ui_main_window = ui_main_window
        self._run_flag = True

    def run(self,weights= str(root_p / 'weights/TKKbest.pt')):
        # Load model
        model = torch.hub.load('ultralytics/yolov5', 'custom', path = weights)
                
        while self._run_flag:
            def check_logname(zone, time, plateNo):
                insert_data = (time, zone, plateNo, datetime.today(), "", "", "")
                self.ui_main_window.insert_one(insert_data)

            def convert_list_from_dict(my_list):
                converted_list = []
                for item in my_list:
                    if item in self.class_dict:
                        converted_list.append(self.class_dict[item])
                    else:
                        converted_list.append(item)
                return converted_list
            
            def format_string(input_str):
                formatted_str = ""
                
                if len(input_str) == 6 and input_str[:2].isdigit():
                    formatted_str = input_str[:2] + '-' + input_str[2:]
                else:
                    for i in range(len(input_str)):
                        if i > 0 and ((input_str[i].isdigit() and not input_str[i-1].isdigit()) or (input_str[i].isalpha() and not input_str[i-1].isalpha())):
                            formatted_str += " "
                        formatted_str += input_str[i]
                
                return formatted_str
                
            def yolo_on_Image(img_path, isMotorcycle): # use yolo on cropped image and return classes found as string
                image = Image.open(img_path)
                
                # Increase contrast
                enhancer = ImageEnhance.Contrast(image)
                enhanced_image = enhancer.enhance(1.5)
                
                result = model(enhanced_image)
                
                json_data = result.pandas().xyxy[0].to_json(orient="records")  # JSON img predictions
                data = json.loads(json_data)
                
                filter_list = ['Carplate', 'Motorcycle','Songteaw', 'Minitruck', 'Pickup', 'SUV', 'Sedan', 'Truck', 'Van']
                filtered_data = [item for item in data if item['name'] not in filter_list]
                
                if isMotorcycle:
                    sort = sorted(data, key=lambda x: x['ymin'])
                    
                    first_three_objects = sort[:3]
                    rest_of_objects = sort[3:]
                    
                    sort_first_three = sorted(first_three_objects, key=lambda x: x['xmin'])
                    sort_rest = sorted(rest_of_objects, key=lambda x: x['xmin'])
                    
                    sorted_data = sort_first_three + sort_rest   
                else:
                    sorted_data = sorted(filtered_data, key=lambda x: x['xmin'])
    
                classes = [obj["name"] for obj in sorted_data if obj["confidence"] >= 0.5]
                classes = convert_list_from_dict(classes)
                classes_string = ''.join(classes)
                classes_string = format_string(classes_string)
                
                return classes_string

            if self.file1_new != self.file1_old:
                self.file1_new = self.file1_old
                obj_name = self.file1_new[:2]+':'+self.file1_new[2:4]+':'+self.file1_new[4:]
                self.file1_ocr = yolo_on_Image(self.img_path_en,self.isMotorcycle_EN)
                check_logname("Entrance", obj_name, self.file1_ocr)
                self.ui_main_window.updateEn_PlateNo(self.file1_ocr)
                self.ui_main_window.updateEn_Count()
                #self.log_signal.emit() #update to table
                QThread.sleep(1)

            if self.file2_new != self.file2_old:
                self.file2_new = self.file2_old
                obj_name = self.file2_new[:2]+':'+self.file2_new[2:4]+':'+self.file2_new[4:]
                self.file2_ocr = yolo_on_Image(self.img_path_ex,self.isMotorcycle_EX)
                check_logname("Exit", obj_name, self.file2_ocr)
                self.ui_main_window.updateEx_PlateNo(self.file2_ocr)
                self.ui_main_window.updateEx_Count()
                #self.log_signal.emit() #update to table
                QThread.sleep(1)
                
            QThread.sleep(10)

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class Ui_MainWindow(object):
    log_date = datetime.now().strftime('%Y.%m.%d')
    current_time = datetime.now().strftime('%H:%M:%S')
    start_date_selected = None
    end_date_selected = None
    en_count = 0
    ex_count = 0
    
    def setupUi(self, MainWindow,env_vars):
        self.env_vars = env_vars
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1359, 1025)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logo.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(3.0)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.tabWidget.setFont(font)
        self.tabWidget.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        self.tabWidget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setStyleSheet("font: 14pt \"Times New Roman\";")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.overview_tab = QtWidgets.QWidget()
        self.overview_tab.setObjectName("overview_tab")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.overview_tab)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_16 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_16.sizePolicy().hasHeightForWidth())
        self.label_16.setSizePolicy(sizePolicy)
        self.label_16.setMinimumSize(QtCore.QSize(640, 30))
        self.label_16.setMaximumSize(QtCore.QSize(640, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_16.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_16.setObjectName("label_16")
        self.verticalLayout_8.addWidget(self.label_16)
        self.lb_Stm_2 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Stm_2.sizePolicy().hasHeightForWidth())
        self.lb_Stm_2.setSizePolicy(sizePolicy)
        self.lb_Stm_2.setMinimumSize(QtCore.QSize(640, 260))
        self.lb_Stm_2.setMaximumSize(QtCore.QSize(640, 260))
        self.lb_Stm_2.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Stm_2.setToolTipDuration(-5)
        self.lb_Stm_2.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Stm_2.setLineWidth(1)
        self.lb_Stm_2.setMidLineWidth(0)
        self.lb_Stm_2.setText("")
        self.lb_Stm_2.setScaledContents(True)
        self.lb_Stm_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Stm_2.setObjectName("lb_Stm_2")
        self.verticalLayout_8.addWidget(self.lb_Stm_2)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_8.addItem(spacerItem)
        self.horizontalLayout_14.addLayout(self.verticalLayout_8)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_18 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_18.sizePolicy().hasHeightForWidth())
        self.label_18.setSizePolicy(sizePolicy)
        self.label_18.setMinimumSize(QtCore.QSize(165, 30))
        self.label_18.setMaximumSize(QtCore.QSize(165, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_18.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.verticalLayout_7.addWidget(self.label_18)
        self.lb_Sn_21 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_21.sizePolicy().hasHeightForWidth())
        self.lb_Sn_21.setSizePolicy(sizePolicy)
        self.lb_Sn_21.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_21.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_21.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_21.setToolTipDuration(-5)
        self.lb_Sn_21.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_21.setLineWidth(1)
        self.lb_Sn_21.setMidLineWidth(0)
        self.lb_Sn_21.setText("")
        self.lb_Sn_21.setScaledContents(True)
        self.lb_Sn_21.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_21.setObjectName("lb_Sn_21")
        self.verticalLayout_7.addWidget(self.lb_Sn_21)
        self.lb_Sn_22 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_22.sizePolicy().hasHeightForWidth())
        self.lb_Sn_22.setSizePolicy(sizePolicy)
        self.lb_Sn_22.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_22.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_22.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_22.setToolTipDuration(-5)
        self.lb_Sn_22.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_22.setLineWidth(1)
        self.lb_Sn_22.setMidLineWidth(0)
        self.lb_Sn_22.setText("")
        self.lb_Sn_22.setScaledContents(True)
        self.lb_Sn_22.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_22.setObjectName("lb_Sn_22")
        self.verticalLayout_7.addWidget(self.lb_Sn_22)
        self.lb_Sn_23 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_23.sizePolicy().hasHeightForWidth())
        self.lb_Sn_23.setSizePolicy(sizePolicy)
        self.lb_Sn_23.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_23.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_23.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_23.setToolTipDuration(-5)
        self.lb_Sn_23.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_23.setLineWidth(1)
        self.lb_Sn_23.setMidLineWidth(0)
        self.lb_Sn_23.setText("")
        self.lb_Sn_23.setScaledContents(True)
        self.lb_Sn_23.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_23.setObjectName("lb_Sn_23")
        self.verticalLayout_7.addWidget(self.lb_Sn_23)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_7.addItem(spacerItem1)
        self.horizontalLayout_14.addLayout(self.verticalLayout_7)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_20 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_20.sizePolicy().hasHeightForWidth())
        self.label_20.setSizePolicy(sizePolicy)
        self.label_20.setMinimumSize(QtCore.QSize(165, 30))
        self.label_20.setMaximumSize(QtCore.QSize(165, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_20.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.verticalLayout_6.addWidget(self.label_20)
        self.lb_Sn_24 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_24.sizePolicy().hasHeightForWidth())
        self.lb_Sn_24.setSizePolicy(sizePolicy)
        self.lb_Sn_24.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_24.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_24.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_24.setToolTipDuration(-5)
        self.lb_Sn_24.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_24.setLineWidth(1)
        self.lb_Sn_24.setMidLineWidth(0)
        self.lb_Sn_24.setText("")
        self.lb_Sn_24.setScaledContents(True)
        self.lb_Sn_24.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_24.setObjectName("lb_Sn_24")
        self.verticalLayout_6.addWidget(self.lb_Sn_24)
        self.lb_Sn_25 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_25.sizePolicy().hasHeightForWidth())
        self.lb_Sn_25.setSizePolicy(sizePolicy)
        self.lb_Sn_25.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_25.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_25.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_25.setToolTipDuration(-5)
        self.lb_Sn_25.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_25.setLineWidth(1)
        self.lb_Sn_25.setMidLineWidth(0)
        self.lb_Sn_25.setText("")
        self.lb_Sn_25.setScaledContents(True)
        self.lb_Sn_25.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_25.setObjectName("lb_Sn_25")
        self.verticalLayout_6.addWidget(self.lb_Sn_25)
        self.lb_Sn_26 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_26.sizePolicy().hasHeightForWidth())
        self.lb_Sn_26.setSizePolicy(sizePolicy)
        self.lb_Sn_26.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_26.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_26.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_26.setToolTipDuration(-5)
        self.lb_Sn_26.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_26.setLineWidth(1)
        self.lb_Sn_26.setMidLineWidth(0)
        self.lb_Sn_26.setText("")
        self.lb_Sn_26.setScaledContents(True)
        self.lb_Sn_26.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_26.setObjectName("lb_Sn_26")
        self.verticalLayout_6.addWidget(self.lb_Sn_26)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_6.addItem(spacerItem2)
        self.horizontalLayout_14.addLayout(self.verticalLayout_6)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_25 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_25.sizePolicy().hasHeightForWidth())
        self.label_25.setSizePolicy(sizePolicy)
        self.label_25.setMinimumSize(QtCore.QSize(250, 30))
        self.label_25.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_25.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_25.setObjectName("label_25")
        self.verticalLayout_2.addWidget(self.label_25)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_31 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_31.sizePolicy().hasHeightForWidth())
        self.label_31.setSizePolicy(sizePolicy)
        self.label_31.setMinimumSize(QtCore.QSize(200, 30))
        self.label_31.setMaximumSize(QtCore.QSize(500, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_31.setFont(font)
        self.label_31.setObjectName("label_31")
        self.horizontalLayout_7.addWidget(self.label_31)
        self.label_OVcp_2 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVcp_2.sizePolicy().hasHeightForWidth())
        self.label_OVcp_2.setSizePolicy(sizePolicy)
        self.label_OVcp_2.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVcp_2.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVcp_2.setFont(font)
        self.label_OVcp_2.setText("")
        self.label_OVcp_2.setObjectName("label_OVcp_2")
        self.horizontalLayout_7.addWidget(self.label_OVcp_2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_33 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_33.sizePolicy().hasHeightForWidth())
        self.label_33.setSizePolicy(sizePolicy)
        self.label_33.setMinimumSize(QtCore.QSize(100, 30))
        self.label_33.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_33.setFont(font)
        self.label_33.setObjectName("label_33")
        self.horizontalLayout_8.addWidget(self.label_33)
        self.label_OVcl_2 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVcl_2.sizePolicy().hasHeightForWidth())
        self.label_OVcl_2.setSizePolicy(sizePolicy)
        self.label_OVcl_2.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVcl_2.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVcl_2.setFont(font)
        self.label_OVcl_2.setText("")
        self.label_OVcl_2.setObjectName("label_OVcl_2")
        self.horizontalLayout_8.addWidget(self.label_OVcl_2)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_30 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_30.sizePolicy().hasHeightForWidth())
        self.label_30.setSizePolicy(sizePolicy)
        self.label_30.setMinimumSize(QtCore.QSize(100, 30))
        self.label_30.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_30.setFont(font)
        self.label_30.setObjectName("label_30")
        self.horizontalLayout_9.addWidget(self.label_30)
        self.label_OVct_2 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVct_2.sizePolicy().hasHeightForWidth())
        self.label_OVct_2.setSizePolicy(sizePolicy)
        self.label_OVct_2.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVct_2.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVct_2.setFont(font)
        self.label_OVct_2.setText("")
        self.label_OVct_2.setObjectName("label_OVct_2")
        self.horizontalLayout_9.addWidget(self.label_OVct_2)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem5)
        self.verticalLayout_2.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_32 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_32.sizePolicy().hasHeightForWidth())
        self.label_32.setSizePolicy(sizePolicy)
        self.label_32.setMinimumSize(QtCore.QSize(130, 30))
        self.label_32.setMaximumSize(QtCore.QSize(130, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_32.setFont(font)
        self.label_32.setObjectName("label_32")
        self.horizontalLayout_10.addWidget(self.label_32)
        self.label_OVcc_2 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVcc_2.sizePolicy().hasHeightForWidth())
        self.label_OVcc_2.setSizePolicy(sizePolicy)
        self.label_OVcc_2.setMinimumSize(QtCore.QSize(120, 30))
        self.label_OVcc_2.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVcc_2.setFont(font)
        self.label_OVcc_2.setText("")
        self.label_OVcc_2.setObjectName("label_OVcc_2")
        self.horizontalLayout_10.addWidget(self.label_OVcc_2)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_10.addItem(spacerItem6)
        self.verticalLayout_2.addLayout(self.horizontalLayout_10)
        spacerItem7 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem7)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        spacerItem8 = QtWidgets.QSpacerItem(120, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_12.addItem(spacerItem8)
        self.lb_BN_1 = QtWidgets.QLabel(self.overview_tab)
        self.lb_BN_1.setMinimumSize(QtCore.QSize(50, 35))
        self.lb_BN_1.setMaximumSize(QtCore.QSize(50, 35))
        self.lb_BN_1.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.lb_BN_1.setText("")
        self.lb_BN_1.setPixmap(QtGui.QPixmap("images/LIV-24logo.png"))
        self.lb_BN_1.setScaledContents(True)
        self.lb_BN_1.setAlignment(QtCore.Qt.AlignmentFlag.AlignJustify|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lb_BN_1.setObjectName("lb_BN_1")
        self.horizontalLayout_12.addWidget(self.lb_BN_1)
        self.lb_BN_2 = QtWidgets.QLabel(self.overview_tab)
        self.lb_BN_2.setMinimumSize(QtCore.QSize(50, 50))
        self.lb_BN_2.setMaximumSize(QtCore.QSize(50, 50))
        self.lb_BN_2.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.lb_BN_2.setText("")
        self.lb_BN_2.setPixmap(QtGui.QPixmap("images/TYT_logo.png"))
        self.lb_BN_2.setScaledContents(True)
        self.lb_BN_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignJustify|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lb_BN_2.setObjectName("lb_BN_2")
        self.horizontalLayout_12.addWidget(self.lb_BN_2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        spacerItem9 = QtWidgets.QSpacerItem(120, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_13.addItem(spacerItem9)
        self.label_46 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_46.sizePolicy().hasHeightForWidth())
        self.label_46.setSizePolicy(sizePolicy)
        self.label_46.setMinimumSize(QtCore.QSize(120, 30))
        self.label_46.setMaximumSize(QtCore.QSize(120, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_46.setFont(font)
        self.label_46.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_46.setObjectName("label_46")
        self.horizontalLayout_13.addWidget(self.label_46)
        self.verticalLayout_2.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_14.addLayout(self.verticalLayout_2)
        self.gridLayout.addLayout(self.horizontalLayout_14, 1, 0, 1, 1)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_15 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        self.label_15.setMinimumSize(QtCore.QSize(640, 30))
        self.label_15.setMaximumSize(QtCore.QSize(640, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_15.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.verticalLayout_5.addWidget(self.label_15)
        self.lb_Stm_1 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Stm_1.sizePolicy().hasHeightForWidth())
        self.lb_Stm_1.setSizePolicy(sizePolicy)
        self.lb_Stm_1.setMinimumSize(QtCore.QSize(640, 260))
        self.lb_Stm_1.setMaximumSize(QtCore.QSize(640, 260))
        self.lb_Stm_1.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Stm_1.setToolTipDuration(-5)
        self.lb_Stm_1.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Stm_1.setLineWidth(1)
        self.lb_Stm_1.setMidLineWidth(0)
        self.lb_Stm_1.setText("")
        self.lb_Stm_1.setScaledContents(True)
        self.lb_Stm_1.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Stm_1.setObjectName("lb_Stm_1")
        self.verticalLayout_5.addWidget(self.lb_Stm_1)
        spacerItem10 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_5.addItem(spacerItem10)
        self.horizontalLayout_11.addLayout(self.verticalLayout_5)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_17 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        self.label_17.setMinimumSize(QtCore.QSize(165, 30))
        self.label_17.setMaximumSize(QtCore.QSize(165, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_17.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.verticalLayout_4.addWidget(self.label_17)
        self.lb_Sn_11 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_11.sizePolicy().hasHeightForWidth())
        self.lb_Sn_11.setSizePolicy(sizePolicy)
        self.lb_Sn_11.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_11.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_11.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_11.setToolTipDuration(-5)
        self.lb_Sn_11.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_11.setLineWidth(1)
        self.lb_Sn_11.setMidLineWidth(0)
        self.lb_Sn_11.setText("")
        self.lb_Sn_11.setScaledContents(True)
        self.lb_Sn_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_11.setObjectName("lb_Sn_11")
        self.verticalLayout_4.addWidget(self.lb_Sn_11)
        self.lb_Sn_12 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_12.sizePolicy().hasHeightForWidth())
        self.lb_Sn_12.setSizePolicy(sizePolicy)
        self.lb_Sn_12.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_12.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_12.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_12.setToolTipDuration(-5)
        self.lb_Sn_12.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_12.setLineWidth(1)
        self.lb_Sn_12.setMidLineWidth(0)
        self.lb_Sn_12.setText("")
        self.lb_Sn_12.setScaledContents(True)
        self.lb_Sn_12.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_12.setObjectName("lb_Sn_12")
        self.verticalLayout_4.addWidget(self.lb_Sn_12)
        self.lb_Sn_13 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_13.sizePolicy().hasHeightForWidth())
        self.lb_Sn_13.setSizePolicy(sizePolicy)
        self.lb_Sn_13.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_13.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_13.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_13.setToolTipDuration(-5)
        self.lb_Sn_13.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_13.setLineWidth(1)
        self.lb_Sn_13.setMidLineWidth(0)
        self.lb_Sn_13.setText("")
        self.lb_Sn_13.setScaledContents(True)
        self.lb_Sn_13.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_13.setObjectName("lb_Sn_13")
        self.verticalLayout_4.addWidget(self.lb_Sn_13)
        spacerItem11 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_4.addItem(spacerItem11)
        self.horizontalLayout_11.addLayout(self.verticalLayout_4)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_19 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_19.sizePolicy().hasHeightForWidth())
        self.label_19.setSizePolicy(sizePolicy)
        self.label_19.setMinimumSize(QtCore.QSize(165, 30))
        self.label_19.setMaximumSize(QtCore.QSize(165, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_19.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_19.setObjectName("label_19")
        self.verticalLayout_3.addWidget(self.label_19)
        self.lb_Sn_14 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_14.sizePolicy().hasHeightForWidth())
        self.lb_Sn_14.setSizePolicy(sizePolicy)
        self.lb_Sn_14.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_14.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_14.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_14.setToolTipDuration(-5)
        self.lb_Sn_14.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_14.setLineWidth(1)
        self.lb_Sn_14.setMidLineWidth(0)
        self.lb_Sn_14.setText("")
        self.lb_Sn_14.setScaledContents(True)
        self.lb_Sn_14.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_14.setObjectName("lb_Sn_14")
        self.verticalLayout_3.addWidget(self.lb_Sn_14)
        self.lb_Sn_15 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_15.sizePolicy().hasHeightForWidth())
        self.lb_Sn_15.setSizePolicy(sizePolicy)
        self.lb_Sn_15.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_15.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_15.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_15.setToolTipDuration(-5)
        self.lb_Sn_15.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_15.setLineWidth(1)
        self.lb_Sn_15.setMidLineWidth(0)
        self.lb_Sn_15.setText("")
        self.lb_Sn_15.setScaledContents(True)
        self.lb_Sn_15.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_15.setObjectName("lb_Sn_15")
        self.verticalLayout_3.addWidget(self.lb_Sn_15)
        self.lb_Sn_16 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_Sn_16.sizePolicy().hasHeightForWidth())
        self.lb_Sn_16.setSizePolicy(sizePolicy)
        self.lb_Sn_16.setMinimumSize(QtCore.QSize(165, 80))
        self.lb_Sn_16.setMaximumSize(QtCore.QSize(165, 80))
        self.lb_Sn_16.setBaseSize(QtCore.QSize(0, 0))
        self.lb_Sn_16.setToolTipDuration(-5)
        self.lb_Sn_16.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.lb_Sn_16.setLineWidth(1)
        self.lb_Sn_16.setMidLineWidth(0)
        self.lb_Sn_16.setText("")
        self.lb_Sn_16.setScaledContents(True)
        self.lb_Sn_16.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Sn_16.setObjectName("lb_Sn_16")
        self.verticalLayout_3.addWidget(self.lb_Sn_16)
        spacerItem12 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_3.addItem(spacerItem12)
        self.horizontalLayout_11.addLayout(self.verticalLayout_3)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_21 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_21.sizePolicy().hasHeightForWidth())
        self.label_21.setSizePolicy(sizePolicy)
        self.label_21.setMinimumSize(QtCore.QSize(250, 30))
        self.label_21.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_21.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_21.setObjectName("label_21")
        self.verticalLayout.addWidget(self.label_21)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_22 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_22.sizePolicy().hasHeightForWidth())
        self.label_22.setSizePolicy(sizePolicy)
        self.label_22.setMinimumSize(QtCore.QSize(100, 30))
        self.label_22.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.horizontalLayout.addWidget(self.label_22)
        self.label_OVdt = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVdt.sizePolicy().hasHeightForWidth())
        self.label_OVdt.setSizePolicy(sizePolicy)
        self.label_OVdt.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVdt.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVdt.setFont(font)
        self.label_OVdt.setText("")
        self.label_OVdt.setObjectName("label_OVdt")
        self.horizontalLayout.addWidget(self.label_OVdt)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem13)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_23 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_23.sizePolicy().hasHeightForWidth())
        self.label_23.setSizePolicy(sizePolicy)
        self.label_23.setMinimumSize(QtCore.QSize(100, 30))
        self.label_23.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_23.setFont(font)
        self.label_23.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_2.addWidget(self.label_23)
        self.label_OVtm = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVtm.sizePolicy().hasHeightForWidth())
        self.label_OVtm.setSizePolicy(sizePolicy)
        self.label_OVtm.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVtm.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVtm.setFont(font)
        self.label_OVtm.setText("")
        self.label_OVtm.setObjectName("label_OVtm")
        self.horizontalLayout_2.addWidget(self.label_OVtm)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem14)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout.addItem(spacerItem15)
        self.label_24 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_24.sizePolicy().hasHeightForWidth())
        self.label_24.setSizePolicy(sizePolicy)
        self.label_24.setMinimumSize(QtCore.QSize(250, 30))
        self.label_24.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);")
        self.label_24.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_24.setObjectName("label_24")
        self.verticalLayout.addWidget(self.label_24)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_26 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_26.sizePolicy().hasHeightForWidth())
        self.label_26.setSizePolicy(sizePolicy)
        self.label_26.setMinimumSize(QtCore.QSize(200, 30))
        self.label_26.setMaximumSize(QtCore.QSize(500, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_26.setFont(font)
        self.label_26.setObjectName("label_26")
        self.horizontalLayout_3.addWidget(self.label_26)
        self.label_OVcp_1 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVcp_1.sizePolicy().hasHeightForWidth())
        self.label_OVcp_1.setSizePolicy(sizePolicy)
        self.label_OVcp_1.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVcp_1.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVcp_1.setFont(font)
        self.label_OVcp_1.setText("")
        self.label_OVcp_1.setObjectName("label_OVcp_1")
        self.horizontalLayout_3.addWidget(self.label_OVcp_1)
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem16)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_27 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_27.sizePolicy().hasHeightForWidth())
        self.label_27.setSizePolicy(sizePolicy)
        self.label_27.setMinimumSize(QtCore.QSize(100, 30))
        self.label_27.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_27.setFont(font)
        self.label_27.setObjectName("label_27")
        self.horizontalLayout_4.addWidget(self.label_27)
        self.label_OVcl_1 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVcl_1.sizePolicy().hasHeightForWidth())
        self.label_OVcl_1.setSizePolicy(sizePolicy)
        self.label_OVcl_1.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVcl_1.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVcl_1.setFont(font)
        self.label_OVcl_1.setText("")
        self.label_OVcl_1.setObjectName("label_OVcl_1")
        self.horizontalLayout_4.addWidget(self.label_OVcl_1)
        spacerItem17 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem17)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_28 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_28.sizePolicy().hasHeightForWidth())
        self.label_28.setSizePolicy(sizePolicy)
        self.label_28.setMinimumSize(QtCore.QSize(100, 30))
        self.label_28.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")
        self.horizontalLayout_5.addWidget(self.label_28)
        self.label_OVct_1 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVct_1.sizePolicy().hasHeightForWidth())
        self.label_OVct_1.setSizePolicy(sizePolicy)
        self.label_OVct_1.setMinimumSize(QtCore.QSize(150, 30))
        self.label_OVct_1.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVct_1.setFont(font)
        self.label_OVct_1.setText("")
        self.label_OVct_1.setObjectName("label_OVct_1")
        self.horizontalLayout_5.addWidget(self.label_OVct_1)
        spacerItem18 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem18)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_29 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_29.sizePolicy().hasHeightForWidth())
        self.label_29.setSizePolicy(sizePolicy)
        self.label_29.setMinimumSize(QtCore.QSize(130, 30))
        self.label_29.setMaximumSize(QtCore.QSize(130, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_29.setFont(font)
        self.label_29.setObjectName("label_29")
        self.horizontalLayout_6.addWidget(self.label_29)
        self.label_OVcc_1 = QtWidgets.QLabel(self.overview_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_OVcc_1.sizePolicy().hasHeightForWidth())
        self.label_OVcc_1.setSizePolicy(sizePolicy)
        self.label_OVcc_1.setMinimumSize(QtCore.QSize(120, 30))
        self.label_OVcc_1.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_OVcc_1.setFont(font)
        self.label_OVcc_1.setText("")
        self.label_OVcc_1.setObjectName("label_OVcc_1")
        self.horizontalLayout_6.addWidget(self.label_OVcc_1)
        spacerItem19 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem19)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        spacerItem20 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout.addItem(spacerItem20)
        self.horizontalLayout_11.addLayout(self.verticalLayout)
        self.gridLayout.addLayout(self.horizontalLayout_11, 0, 0, 1, 1)
        spacerItem21 = QtWidgets.QSpacerItem(20, 13, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        self.gridLayout.addItem(spacerItem21, 2, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.tabWidget.addTab(self.overview_tab, "")
        self.report_generator_tab = QtWidgets.QWidget()
        self.report_generator_tab.setObjectName("report_generator_tab")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.report_generator_tab)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout()
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.tableWidget = QtWidgets.QTableWidget(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setMinimumSize(QtCore.QSize(620, 600))
        self.tableWidget.setMaximumSize(QtCore.QSize(620, 600))
        self.tableWidget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.tableWidget.setTabKeyNavigation(False)
        self.tableWidget.setProperty("showDropIndicator", False)
        self.tableWidget.setDragDropOverwriteMode(False)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.tableWidget.setTextElideMode(QtCore.Qt.TextElideMode.ElideLeft)
        self.tableWidget.setRowCount(1)
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setObjectName("tableWidget")

        self.tableWidget.setHorizontalHeaderLabels(['Date', 'Time', 'Zone', 'Plate Number'])
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.verticalHeader().setVisible(False)
        
        self.verticalLayout_20.addWidget(self.tableWidget)
        spacerItem22 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_20.addItem(spacerItem22)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.btn_RGcl = QtWidgets.QPushButton(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_RGcl.sizePolicy().hasHeightForWidth())
        self.btn_RGcl.setSizePolicy(sizePolicy)
        self.btn_RGcl.setMaximumSize(QtCore.QSize(50, 50))
        self.btn_RGcl.setAutoFillBackground(False)
        self.btn_RGcl.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.btn_RGcl.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/calendar.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_RGcl.setIcon(icon1)
        self.btn_RGcl.setIconSize(QtCore.QSize(45, 45))
        self.btn_RGcl.setObjectName("btn_RGcl")
        self.horizontalLayout_15.addWidget(self.btn_RGcl)
        self.lineEdit_RGfcp = QtWidgets.QLineEdit(self.report_generator_tab)
        self.lineEdit_RGfcp.setMinimumSize(QtCore.QSize(0, 40))
        self.lineEdit_RGfcp.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit_RGfcp.setObjectName("lineEdit_RGfcp")
        self.horizontalLayout_15.addWidget(self.lineEdit_RGfcp)
        self.btn_RGnt = QtWidgets.QPushButton(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_RGnt.sizePolicy().hasHeightForWidth())
        self.btn_RGnt.setSizePolicy(sizePolicy)
        self.btn_RGnt.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_RGnt.setMaximumSize(QtCore.QSize(60, 40))
        self.btn_RGnt.setObjectName("btn_RGnt")
        self.horizontalLayout_15.addWidget(self.btn_RGnt)
        spacerItem23 = QtWidgets.QSpacerItem(110, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_15.addItem(spacerItem23)
        self.btn_RGel = QtWidgets.QPushButton(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_RGel.sizePolicy().hasHeightForWidth())
        self.btn_RGel.setSizePolicy(sizePolicy)
        self.btn_RGel.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_RGel.setMaximumSize(QtCore.QSize(120, 40))
        self.btn_RGel.setObjectName("btn_RGel")
        self.horizontalLayout_15.addWidget(self.btn_RGel)
        self.verticalLayout_20.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_39.addLayout(self.verticalLayout_20)
        spacerItem24 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_39.addItem(spacerItem24)
        self.verticalLayout_19 = QtWidgets.QVBoxLayout()
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.label_34 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_34.sizePolicy().hasHeightForWidth())
        self.label_34.setSizePolicy(sizePolicy)
        self.label_34.setMinimumSize(QtCore.QSize(250, 40))
        self.label_34.setMaximumSize(QtCore.QSize(650, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);\n"
"font: 75 18pt \"Times New Roman\";")
        self.label_34.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_34.setObjectName("label_34")
        self.verticalLayout_19.addWidget(self.label_34)
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.lb_RGsp = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_RGsp.sizePolicy().hasHeightForWidth())
        self.lb_RGsp.setSizePolicy(sizePolicy)
        self.lb_RGsp.setMinimumSize(QtCore.QSize(320, 182))
        self.lb_RGsp.setMaximumSize(QtCore.QSize(320, 182))
        self.lb_RGsp.setBaseSize(QtCore.QSize(0, 0))
        self.lb_RGsp.setToolTipDuration(-5)
        self.lb_RGsp.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.lb_RGsp.setLineWidth(1)
        self.lb_RGsp.setMidLineWidth(0)
        self.lb_RGsp.setText("")
        self.lb_RGsp.setScaledContents(True)
        self.lb_RGsp.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_RGsp.setObjectName("lb_RGsp")
        self.horizontalLayout_35.addWidget(self.lb_RGsp)
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        spacerItem25 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Maximum)
        self.verticalLayout_18.addItem(spacerItem25)
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.label_57 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_57.sizePolicy().hasHeightForWidth())
        self.label_57.setSizePolicy(sizePolicy)
        self.label_57.setMinimumSize(QtCore.QSize(100, 30))
        self.label_57.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_57.setFont(font)
        self.label_57.setObjectName("label_57")
        self.horizontalLayout_31.addWidget(self.label_57)
        self.label_RGdt = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_RGdt.sizePolicy().hasHeightForWidth())
        self.label_RGdt.setSizePolicy(sizePolicy)
        self.label_RGdt.setMinimumSize(QtCore.QSize(150, 30))
        self.label_RGdt.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_RGdt.setFont(font)
        self.label_RGdt.setText("")
        self.label_RGdt.setObjectName("label_RGdt")
        self.horizontalLayout_31.addWidget(self.label_RGdt)
        self.verticalLayout_18.addLayout(self.horizontalLayout_31)
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.label_58 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_58.sizePolicy().hasHeightForWidth())
        self.label_58.setSizePolicy(sizePolicy)
        self.label_58.setMinimumSize(QtCore.QSize(100, 30))
        self.label_58.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_58.setFont(font)
        self.label_58.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_58.setObjectName("label_58")
        self.horizontalLayout_32.addWidget(self.label_58)
        self.label_RGtm = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_RGtm.sizePolicy().hasHeightForWidth())
        self.label_RGtm.setSizePolicy(sizePolicy)
        self.label_RGtm.setMinimumSize(QtCore.QSize(150, 30))
        self.label_RGtm.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_RGtm.setFont(font)
        self.label_RGtm.setText("")
        self.label_RGtm.setObjectName("label_RGtm")
        self.horizontalLayout_32.addWidget(self.label_RGtm)
        self.verticalLayout_18.addLayout(self.horizontalLayout_32)
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.label_59 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_59.sizePolicy().hasHeightForWidth())
        self.label_59.setSizePolicy(sizePolicy)
        self.label_59.setMinimumSize(QtCore.QSize(100, 30))
        self.label_59.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_59.setFont(font)
        self.label_59.setObjectName("label_59")
        self.horizontalLayout_33.addWidget(self.label_59)
        self.lineEdit_RGcp = QtWidgets.QLineEdit(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_RGcp.sizePolicy().hasHeightForWidth())
        self.lineEdit_RGcp.setSizePolicy(sizePolicy)
        self.lineEdit_RGcp.setMinimumSize(QtCore.QSize(150, 30))
        self.lineEdit_RGcp.setMaximumSize(QtCore.QSize(150, 30))
        self.lineEdit_RGcp.setObjectName("lineEdit_RGcp")
        self.horizontalLayout_33.addWidget(self.lineEdit_RGcp)
        self.verticalLayout_18.addLayout(self.horizontalLayout_33)
        spacerItem26 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Maximum)
        self.verticalLayout_18.addItem(spacerItem26)
        self.horizontalLayout_35.addLayout(self.verticalLayout_18)
        self.verticalLayout_19.addLayout(self.horizontalLayout_35)
        spacerItem27 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout_19.addItem(spacerItem27)
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_60 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_60.sizePolicy().hasHeightForWidth())
        self.label_60.setSizePolicy(sizePolicy)
        self.label_60.setMinimumSize(QtCore.QSize(60, 30))
        self.label_60.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_60.setFont(font)
        self.label_60.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_60.setObjectName("label_60")
        self.verticalLayout_17.addWidget(self.label_60)
        spacerItem28 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_17.addItem(spacerItem28)
        self.horizontalLayout_34.addLayout(self.verticalLayout_17)
        self.textEdit_RGrd = QtWidgets.QTextEdit(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_RGrd.sizePolicy().hasHeightForWidth())
        self.textEdit_RGrd.setSizePolicy(sizePolicy)
        self.textEdit_RGrd.setMinimumSize(QtCore.QSize(520, 0))
        self.textEdit_RGrd.setMaximumSize(QtCore.QSize(520, 400))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.textEdit_RGrd.setFont(font)
        self.textEdit_RGrd.setStyleSheet("font: 18pt \"Times New Roman\";")
        self.textEdit_RGrd.setObjectName("textEdit_RGrd")
        self.horizontalLayout_34.addWidget(self.textEdit_RGrd)
        self.verticalLayout_19.addLayout(self.horizontalLayout_34)
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.cB_RGsp01 = QtWidgets.QCheckBox(self.report_generator_tab)
        self.cB_RGsp01.setMaximumSize(QtCore.QSize(15, 15))
        self.cB_RGsp01.setText("")
        self.cB_RGsp01.setChecked(True)
        self.cB_RGsp01.setObjectName("cB_RGsp01")
        self.horizontalLayout_36.addWidget(self.cB_RGsp01)
        self.lb_RGsp01 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_RGsp01.sizePolicy().hasHeightForWidth())
        self.lb_RGsp01.setSizePolicy(sizePolicy)
        self.lb_RGsp01.setMinimumSize(QtCore.QSize(160, 91))
        self.lb_RGsp01.setMaximumSize(QtCore.QSize(160, 91))
        self.lb_RGsp01.setBaseSize(QtCore.QSize(0, 0))
        self.lb_RGsp01.setToolTipDuration(-5)
        self.lb_RGsp01.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.lb_RGsp01.setLineWidth(1)
        self.lb_RGsp01.setMidLineWidth(0)
        self.lb_RGsp01.setText("")
        self.lb_RGsp01.setScaledContents(True)
        self.lb_RGsp01.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_RGsp01.setObjectName("lb_RGsp01")
        self.horizontalLayout_36.addWidget(self.lb_RGsp01)
        self.cB_RGsp02 = QtWidgets.QCheckBox(self.report_generator_tab)
        self.cB_RGsp02.setMaximumSize(QtCore.QSize(15, 15))
        self.cB_RGsp02.setText("")
        self.cB_RGsp02.setChecked(True)
        self.cB_RGsp02.setObjectName("cB_RGsp02")
        self.horizontalLayout_36.addWidget(self.cB_RGsp02)
        self.lb_RGsp02 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_RGsp02.sizePolicy().hasHeightForWidth())
        self.lb_RGsp02.setSizePolicy(sizePolicy)
        self.lb_RGsp02.setMinimumSize(QtCore.QSize(160, 91))
        self.lb_RGsp02.setMaximumSize(QtCore.QSize(160, 91))
        self.lb_RGsp02.setBaseSize(QtCore.QSize(0, 0))
        self.lb_RGsp02.setToolTipDuration(-5)
        self.lb_RGsp02.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.lb_RGsp02.setLineWidth(1)
        self.lb_RGsp02.setMidLineWidth(0)
        self.lb_RGsp02.setText("")
        self.lb_RGsp02.setScaledContents(True)
        self.lb_RGsp02.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_RGsp02.setObjectName("lb_RGsp02")
        self.horizontalLayout_36.addWidget(self.lb_RGsp02)
        self.cB_RGsp03 = QtWidgets.QCheckBox(self.report_generator_tab)
        self.cB_RGsp03.setMaximumSize(QtCore.QSize(15, 15))
        self.cB_RGsp03.setText("")
        self.cB_RGsp03.setChecked(True)
        self.cB_RGsp03.setObjectName("cB_RGsp03")
        self.horizontalLayout_36.addWidget(self.cB_RGsp03)
        self.lb_RGsp03 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_RGsp03.sizePolicy().hasHeightForWidth())
        self.lb_RGsp03.setSizePolicy(sizePolicy)
        self.lb_RGsp03.setMinimumSize(QtCore.QSize(160, 91))
        self.lb_RGsp03.setMaximumSize(QtCore.QSize(160, 91))
        self.lb_RGsp03.setBaseSize(QtCore.QSize(0, 0))
        self.lb_RGsp03.setToolTipDuration(-5)
        self.lb_RGsp03.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.lb_RGsp03.setLineWidth(1)
        self.lb_RGsp03.setMidLineWidth(0)
        self.lb_RGsp03.setText("")
        self.lb_RGsp03.setScaledContents(True)
        self.lb_RGsp03.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_RGsp03.setObjectName("lb_RGsp03")
        self.horizontalLayout_36.addWidget(self.lb_RGsp03)
        self.verticalLayout_19.addLayout(self.horizontalLayout_36)
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.cB_RGsp04 = QtWidgets.QCheckBox(self.report_generator_tab)
        self.cB_RGsp04.setMaximumSize(QtCore.QSize(15, 15))
        self.cB_RGsp04.setText("")
        self.cB_RGsp04.setChecked(True)
        self.cB_RGsp04.setObjectName("cB_RGsp04")
        self.horizontalLayout_37.addWidget(self.cB_RGsp04)
        self.lb_RGsp04 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_RGsp04.sizePolicy().hasHeightForWidth())
        self.lb_RGsp04.setSizePolicy(sizePolicy)
        self.lb_RGsp04.setMinimumSize(QtCore.QSize(160, 91))
        self.lb_RGsp04.setMaximumSize(QtCore.QSize(160, 91))
        self.lb_RGsp04.setBaseSize(QtCore.QSize(0, 0))
        self.lb_RGsp04.setToolTipDuration(-5)
        self.lb_RGsp04.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.lb_RGsp04.setLineWidth(1)
        self.lb_RGsp04.setMidLineWidth(0)
        self.lb_RGsp04.setText("")
        self.lb_RGsp04.setScaledContents(True)
        self.lb_RGsp04.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_RGsp04.setObjectName("lb_RGsp04")
        self.horizontalLayout_37.addWidget(self.lb_RGsp04)
        self.cB_RGsp05 = QtWidgets.QCheckBox(self.report_generator_tab)
        self.cB_RGsp05.setMaximumSize(QtCore.QSize(15, 15))
        self.cB_RGsp05.setText("")
        self.cB_RGsp05.setChecked(True)
        self.cB_RGsp05.setObjectName("cB_RGsp05")
        self.horizontalLayout_37.addWidget(self.cB_RGsp05)
        self.lb_RGsp05 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_RGsp05.sizePolicy().hasHeightForWidth())
        self.lb_RGsp05.setSizePolicy(sizePolicy)
        self.lb_RGsp05.setMinimumSize(QtCore.QSize(160, 91))
        self.lb_RGsp05.setMaximumSize(QtCore.QSize(160, 91))
        self.lb_RGsp05.setBaseSize(QtCore.QSize(0, 0))
        self.lb_RGsp05.setToolTipDuration(-5)
        self.lb_RGsp05.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.lb_RGsp05.setLineWidth(1)
        self.lb_RGsp05.setMidLineWidth(0)
        self.lb_RGsp05.setText("")
        self.lb_RGsp05.setScaledContents(True)
        self.lb_RGsp05.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_RGsp05.setObjectName("lb_RGsp05")
        self.horizontalLayout_37.addWidget(self.lb_RGsp05)
        self.cB_RGsp06 = QtWidgets.QCheckBox(self.report_generator_tab)
        self.cB_RGsp06.setMaximumSize(QtCore.QSize(15, 15))
        self.cB_RGsp06.setText("")
        self.cB_RGsp06.setChecked(True)
        self.cB_RGsp06.setObjectName("cB_RGsp06")
        self.horizontalLayout_37.addWidget(self.cB_RGsp06)
        self.lb_RGsp06 = QtWidgets.QLabel(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lb_RGsp06.sizePolicy().hasHeightForWidth())
        self.lb_RGsp06.setSizePolicy(sizePolicy)
        self.lb_RGsp06.setMinimumSize(QtCore.QSize(160, 91))
        self.lb_RGsp06.setMaximumSize(QtCore.QSize(160, 91))
        self.lb_RGsp06.setBaseSize(QtCore.QSize(0, 0))
        self.lb_RGsp06.setToolTipDuration(-5)
        self.lb_RGsp06.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.lb_RGsp06.setLineWidth(1)
        self.lb_RGsp06.setMidLineWidth(0)
        self.lb_RGsp06.setText("")
        self.lb_RGsp06.setScaledContents(True)
        self.lb_RGsp06.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_RGsp06.setObjectName("lb_RGsp06")
        self.horizontalLayout_37.addWidget(self.lb_RGsp06)
        self.verticalLayout_19.addLayout(self.horizontalLayout_37)
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        spacerItem29 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_38.addItem(spacerItem29)
        self.btn_RGepdf = QtWidgets.QPushButton(self.report_generator_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_RGepdf.sizePolicy().hasHeightForWidth())
        self.btn_RGepdf.setSizePolicy(sizePolicy)
        self.btn_RGepdf.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_RGepdf.setMaximumSize(QtCore.QSize(140, 40))
        self.btn_RGepdf.setObjectName("btn_RGepdf")
        self.horizontalLayout_38.addWidget(self.btn_RGepdf)
        self.verticalLayout_19.addLayout(self.horizontalLayout_38)
        self.horizontalLayout_39.addLayout(self.verticalLayout_19)
        self.gridLayout_3.addLayout(self.horizontalLayout_39, 0, 0, 1, 1)
        self.tabWidget.addTab(self.report_generator_tab, "")
        self.setting_tab = QtWidgets.QWidget()
        self.setting_tab.setObjectName("setting_tab")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.setting_tab)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.label_61 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_61.sizePolicy().hasHeightForWidth())
        self.label_61.setSizePolicy(sizePolicy)
        self.label_61.setMinimumSize(QtCore.QSize(250, 40))
        self.label_61.setMaximumSize(QtCore.QSize(100000, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_61.setFont(font)
        self.label_61.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);\n"
"font: 75 18pt \"Times New Roman\";")
        self.label_61.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_61.setObjectName("label_61")
        self.verticalLayout_21.addWidget(self.label_61)
        self.horizontalLayout_43 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_43.setObjectName("horizontalLayout_43")
        self.label_62 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_62.sizePolicy().hasHeightForWidth())
        self.label_62.setSizePolicy(sizePolicy)
        self.label_62.setMinimumSize(QtCore.QSize(120, 30))
        self.label_62.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_62.setFont(font)
        self.label_62.setObjectName("label_62")
        self.horizontalLayout_43.addWidget(self.label_62)
        self.lineEdit_STENadr1 = QtWidgets.QLineEdit(self.setting_tab)
        self.lineEdit_STENadr1.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_STENadr1.setMaximumSize(QtCore.QSize(600, 30))
        self.lineEdit_STENadr1.setObjectName("lineEdit_STENadr1")
        self.horizontalLayout_43.addWidget(self.lineEdit_STENadr1)
        self.state_STENadr1 = QtWidgets.QLabel(self.setting_tab)
        self.state_STENadr1.setMinimumSize(QtCore.QSize(30, 0))
        self.state_STENadr1.setText("")
        self.state_STENadr1.setObjectName("state_STENadr1")
        self.horizontalLayout_43.addWidget(self.state_STENadr1)
        spacerItem30 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_43.addItem(spacerItem30)
        self.verticalLayout_21.addLayout(self.horizontalLayout_43)
        self.horizontalLayout_42 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_42.setObjectName("horizontalLayout_42")
        self.label_63 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_63.sizePolicy().hasHeightForWidth())
        self.label_63.setSizePolicy(sizePolicy)
        self.label_63.setMinimumSize(QtCore.QSize(120, 30))
        self.label_63.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_63.setFont(font)
        self.label_63.setObjectName("label_63")
        self.horizontalLayout_42.addWidget(self.label_63)
        self.lineEdit_STENadr2 = QtWidgets.QLineEdit(self.setting_tab)
        self.lineEdit_STENadr2.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_STENadr2.setMaximumSize(QtCore.QSize(600, 30))
        self.lineEdit_STENadr2.setObjectName("lineEdit_STENadr2")
        self.horizontalLayout_42.addWidget(self.lineEdit_STENadr2)
        self.state_STENadr2 = QtWidgets.QLabel(self.setting_tab)
        self.state_STENadr2.setMinimumSize(QtCore.QSize(30, 0))
        self.state_STENadr2.setText("")
        self.state_STENadr2.setObjectName("state_STENadr2")
        self.horizontalLayout_42.addWidget(self.state_STENadr2)
        spacerItem31 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_42.addItem(spacerItem31)
        self.verticalLayout_21.addLayout(self.horizontalLayout_42)
        self.horizontalLayout_41 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_41.setObjectName("horizontalLayout_41")
        self.label_64 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_64.sizePolicy().hasHeightForWidth())
        self.label_64.setSizePolicy(sizePolicy)
        self.label_64.setMinimumSize(QtCore.QSize(120, 30))
        self.label_64.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_64.setFont(font)
        self.label_64.setObjectName("label_64")
        self.horizontalLayout_41.addWidget(self.label_64)
        self.lineEdit_STENadr3 = QtWidgets.QLineEdit(self.setting_tab)
        self.lineEdit_STENadr3.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_STENadr3.setMaximumSize(QtCore.QSize(600, 30))
        self.lineEdit_STENadr3.setObjectName("lineEdit_STENadr3")
        self.horizontalLayout_41.addWidget(self.lineEdit_STENadr3)
        self.state_STENadr3 = QtWidgets.QLabel(self.setting_tab)
        self.state_STENadr3.setMinimumSize(QtCore.QSize(30, 0))
        self.state_STENadr3.setText("")
        self.state_STENadr3.setObjectName("state_STENadr3")
        self.horizontalLayout_41.addWidget(self.state_STENadr3)
        spacerItem32 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_41.addItem(spacerItem32)
        self.verticalLayout_21.addLayout(self.horizontalLayout_41)
        self.horizontalLayout_40 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_40.setObjectName("horizontalLayout_40")
        self.label_65 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_65.sizePolicy().hasHeightForWidth())
        self.label_65.setSizePolicy(sizePolicy)
        self.label_65.setMinimumSize(QtCore.QSize(90, 30))
        self.label_65.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_65.setFont(font)
        self.label_65.setObjectName("label_65")
        self.horizontalLayout_40.addWidget(self.label_65)
        self.lineEdit_STENtr1 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STENtr1.sizePolicy().hasHeightForWidth())
        self.lineEdit_STENtr1.setSizePolicy(sizePolicy)
        self.lineEdit_STENtr1.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr1.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr1.setObjectName("lineEdit_STENtr1")
        self.horizontalLayout_40.addWidget(self.lineEdit_STENtr1)
        spacerItem33 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_40.addItem(spacerItem33)
        self.label_66 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_66.sizePolicy().hasHeightForWidth())
        self.label_66.setSizePolicy(sizePolicy)
        self.label_66.setMinimumSize(QtCore.QSize(90, 30))
        self.label_66.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_66.setFont(font)
        self.label_66.setObjectName("label_66")
        self.horizontalLayout_40.addWidget(self.label_66)
        self.lineEdit_STENtr2 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STENtr2.sizePolicy().hasHeightForWidth())
        self.lineEdit_STENtr2.setSizePolicy(sizePolicy)
        self.lineEdit_STENtr2.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr2.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr2.setObjectName("lineEdit_STENtr2")
        self.horizontalLayout_40.addWidget(self.lineEdit_STENtr2)
        spacerItem34 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_40.addItem(spacerItem34)
        self.label_67 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_67.sizePolicy().hasHeightForWidth())
        self.label_67.setSizePolicy(sizePolicy)
        self.label_67.setMinimumSize(QtCore.QSize(90, 30))
        self.label_67.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_67.setFont(font)
        self.label_67.setObjectName("label_67")
        self.horizontalLayout_40.addWidget(self.label_67)
        self.lineEdit_STENtr3 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STENtr3.sizePolicy().hasHeightForWidth())
        self.lineEdit_STENtr3.setSizePolicy(sizePolicy)
        self.lineEdit_STENtr3.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr3.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr3.setObjectName("lineEdit_STENtr3")
        self.horizontalLayout_40.addWidget(self.lineEdit_STENtr3)
        spacerItem35 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_40.addItem(spacerItem35)
        self.label_68 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_68.sizePolicy().hasHeightForWidth())
        self.label_68.setSizePolicy(sizePolicy)
        self.label_68.setMinimumSize(QtCore.QSize(90, 30))
        self.label_68.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_68.setFont(font)
        self.label_68.setObjectName("label_68")
        self.horizontalLayout_40.addWidget(self.label_68)
        self.lineEdit_STENtr4 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STENtr4.sizePolicy().hasHeightForWidth())
        self.lineEdit_STENtr4.setSizePolicy(sizePolicy)
        self.lineEdit_STENtr4.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr4.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr4.setObjectName("lineEdit_STENtr4")
        self.horizontalLayout_40.addWidget(self.lineEdit_STENtr4)
        spacerItem36 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_40.addItem(spacerItem36)
        self.label_69 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_69.sizePolicy().hasHeightForWidth())
        self.label_69.setSizePolicy(sizePolicy)
        self.label_69.setMinimumSize(QtCore.QSize(90, 30))
        self.label_69.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_69.setFont(font)
        self.label_69.setObjectName("label_69")
        self.horizontalLayout_40.addWidget(self.label_69)
        self.lineEdit_STENtr5 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STENtr5.sizePolicy().hasHeightForWidth())
        self.lineEdit_STENtr5.setSizePolicy(sizePolicy)
        self.lineEdit_STENtr5.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr5.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STENtr5.setObjectName("lineEdit_STENtr5")
        self.horizontalLayout_40.addWidget(self.lineEdit_STENtr5)
        spacerItem37 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_40.addItem(spacerItem37)
        self.verticalLayout_21.addLayout(self.horizontalLayout_40)
        self.label_70 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_70.sizePolicy().hasHeightForWidth())
        self.label_70.setSizePolicy(sizePolicy)
        self.label_70.setMinimumSize(QtCore.QSize(250, 40))
        self.label_70.setMaximumSize(QtCore.QSize(100000, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_70.setFont(font)
        self.label_70.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);\n"
"font: 75 18pt \"Times New Roman\";")
        self.label_70.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_70.setObjectName("label_70")
        self.verticalLayout_21.addWidget(self.label_70)
        self.horizontalLayout_47 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_47.setObjectName("horizontalLayout_47")
        self.label_78 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_78.sizePolicy().hasHeightForWidth())
        self.label_78.setSizePolicy(sizePolicy)
        self.label_78.setMinimumSize(QtCore.QSize(120, 30))
        self.label_78.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_78.setFont(font)
        self.label_78.setObjectName("label_78")
        self.horizontalLayout_47.addWidget(self.label_78)
        self.lineEdit_STEXadr1 = QtWidgets.QLineEdit(self.setting_tab)
        self.lineEdit_STEXadr1.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_STEXadr1.setMaximumSize(QtCore.QSize(600, 30))
        self.lineEdit_STEXadr1.setObjectName("lineEdit_STEXadr1")
        self.horizontalLayout_47.addWidget(self.lineEdit_STEXadr1)
        self.state_STEXadr1 = QtWidgets.QLabel(self.setting_tab)
        self.state_STEXadr1.setMinimumSize(QtCore.QSize(30, 0))
        self.state_STEXadr1.setText("")
        self.state_STEXadr1.setObjectName("state_STEXadr1")
        self.horizontalLayout_47.addWidget(self.state_STEXadr1)
        spacerItem38 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_47.addItem(spacerItem38)
        self.verticalLayout_21.addLayout(self.horizontalLayout_47)
        self.horizontalLayout_45 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_45.setObjectName("horizontalLayout_45")
        self.label_76 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_76.sizePolicy().hasHeightForWidth())
        self.label_76.setSizePolicy(sizePolicy)
        self.label_76.setMinimumSize(QtCore.QSize(120, 30))
        self.label_76.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_76.setFont(font)
        self.label_76.setObjectName("label_76")
        self.horizontalLayout_45.addWidget(self.label_76)
        self.lineEdit_STEXadr2 = QtWidgets.QLineEdit(self.setting_tab)
        self.lineEdit_STEXadr2.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_STEXadr2.setMaximumSize(QtCore.QSize(600, 30))
        self.lineEdit_STEXadr2.setObjectName("lineEdit_STEXadr2")
        self.horizontalLayout_45.addWidget(self.lineEdit_STEXadr2)
        self.state_STEXadr2 = QtWidgets.QLabel(self.setting_tab)
        self.state_STEXadr2.setMinimumSize(QtCore.QSize(30, 0))
        self.state_STEXadr2.setText("")
        self.state_STEXadr2.setObjectName("state_STEXadr2")
        self.horizontalLayout_45.addWidget(self.state_STEXadr2)
        spacerItem39 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_45.addItem(spacerItem39)
        self.verticalLayout_21.addLayout(self.horizontalLayout_45)
        self.horizontalLayout_46 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_46.setObjectName("horizontalLayout_46")
        self.label_77 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_77.sizePolicy().hasHeightForWidth())
        self.label_77.setSizePolicy(sizePolicy)
        self.label_77.setMinimumSize(QtCore.QSize(120, 30))
        self.label_77.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_77.setFont(font)
        self.label_77.setObjectName("label_77")
        self.horizontalLayout_46.addWidget(self.label_77)
        self.lineEdit_STEXadr3 = QtWidgets.QLineEdit(self.setting_tab)
        self.lineEdit_STEXadr3.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_STEXadr3.setMaximumSize(QtCore.QSize(600, 30))
        self.lineEdit_STEXadr3.setObjectName("lineEdit_STEXadr3")
        self.horizontalLayout_46.addWidget(self.lineEdit_STEXadr3)
        self.state_STEXadr3 = QtWidgets.QLabel(self.setting_tab)
        self.state_STEXadr3.setMinimumSize(QtCore.QSize(30, 0))
        self.state_STEXadr3.setText("")
        self.state_STEXadr3.setObjectName("state_STEXadr3")
        self.horizontalLayout_46.addWidget(self.state_STEXadr3)
        spacerItem40 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_46.addItem(spacerItem40)
        self.verticalLayout_21.addLayout(self.horizontalLayout_46)
        self.horizontalLayout_44 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_44.setObjectName("horizontalLayout_44")
        self.label_71 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_71.sizePolicy().hasHeightForWidth())
        self.label_71.setSizePolicy(sizePolicy)
        self.label_71.setMinimumSize(QtCore.QSize(90, 30))
        self.label_71.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_71.setFont(font)
        self.label_71.setObjectName("label_71")
        self.horizontalLayout_44.addWidget(self.label_71)
        self.lineEdit_STEXtr1 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STEXtr1.sizePolicy().hasHeightForWidth())
        self.lineEdit_STEXtr1.setSizePolicy(sizePolicy)
        self.lineEdit_STEXtr1.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr1.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr1.setObjectName("lineEdit_STEXtr1")
        self.horizontalLayout_44.addWidget(self.lineEdit_STEXtr1)
        spacerItem41 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_44.addItem(spacerItem41)
        self.label_72 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_72.sizePolicy().hasHeightForWidth())
        self.label_72.setSizePolicy(sizePolicy)
        self.label_72.setMinimumSize(QtCore.QSize(90, 30))
        self.label_72.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_72.setFont(font)
        self.label_72.setObjectName("label_72")
        self.horizontalLayout_44.addWidget(self.label_72)
        self.lineEdit_STEXtr2 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STEXtr2.sizePolicy().hasHeightForWidth())
        self.lineEdit_STEXtr2.setSizePolicy(sizePolicy)
        self.lineEdit_STEXtr2.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr2.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr2.setObjectName("lineEdit_STEXtr2")
        self.horizontalLayout_44.addWidget(self.lineEdit_STEXtr2)
        spacerItem42 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_44.addItem(spacerItem42)
        self.label_73 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_73.sizePolicy().hasHeightForWidth())
        self.label_73.setSizePolicy(sizePolicy)
        self.label_73.setMinimumSize(QtCore.QSize(90, 30))
        self.label_73.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_73.setFont(font)
        self.label_73.setObjectName("label_73")
        self.horizontalLayout_44.addWidget(self.label_73)
        self.lineEdit_STEXtr3 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STEXtr3.sizePolicy().hasHeightForWidth())
        self.lineEdit_STEXtr3.setSizePolicy(sizePolicy)
        self.lineEdit_STEXtr3.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr3.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr3.setObjectName("lineEdit_STEXtr3")
        self.horizontalLayout_44.addWidget(self.lineEdit_STEXtr3)
        spacerItem43 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_44.addItem(spacerItem43)
        self.label_74 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_74.sizePolicy().hasHeightForWidth())
        self.label_74.setSizePolicy(sizePolicy)
        self.label_74.setMinimumSize(QtCore.QSize(90, 30))
        self.label_74.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_74.setFont(font)
        self.label_74.setObjectName("label_74")
        self.horizontalLayout_44.addWidget(self.label_74)
        self.lineEdit_STEXtr4 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STEXtr4.sizePolicy().hasHeightForWidth())
        self.lineEdit_STEXtr4.setSizePolicy(sizePolicy)
        self.lineEdit_STEXtr4.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr4.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr4.setObjectName("lineEdit_STEXtr4")
        self.horizontalLayout_44.addWidget(self.lineEdit_STEXtr4)
        spacerItem44 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_44.addItem(spacerItem44)
        self.label_75 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_75.sizePolicy().hasHeightForWidth())
        self.label_75.setSizePolicy(sizePolicy)
        self.label_75.setMinimumSize(QtCore.QSize(90, 30))
        self.label_75.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_75.setFont(font)
        self.label_75.setObjectName("label_75")
        self.horizontalLayout_44.addWidget(self.label_75)
        self.lineEdit_STEXtr5 = QtWidgets.QLineEdit(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_STEXtr5.sizePolicy().hasHeightForWidth())
        self.lineEdit_STEXtr5.setSizePolicy(sizePolicy)
        self.lineEdit_STEXtr5.setMinimumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr5.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_STEXtr5.setObjectName("lineEdit_STEXtr5")
        self.horizontalLayout_44.addWidget(self.lineEdit_STEXtr5)
        spacerItem45 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_44.addItem(spacerItem45)
        self.verticalLayout_21.addLayout(self.horizontalLayout_44)
        spacerItem46 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_21.addItem(spacerItem46)
        self.label_79 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_79.sizePolicy().hasHeightForWidth())
        self.label_79.setSizePolicy(sizePolicy)
        self.label_79.setMinimumSize(QtCore.QSize(250, 40))
        self.label_79.setMaximumSize(QtCore.QSize(100000, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_79.setFont(font)
        self.label_79.setStyleSheet("background-color: rgb(0, 37, 84);\n"
"color: rgb(255, 255, 255);\n"
"font: 75 18pt \"Times New Roman\";")
        self.label_79.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_79.setObjectName("label_79")
        self.verticalLayout_21.addWidget(self.label_79)
        self.horizontalLayout_48 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_48.setObjectName("horizontalLayout_48")
        self.label_80 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_80.sizePolicy().hasHeightForWidth())
        self.label_80.setSizePolicy(sizePolicy)
        self.label_80.setMinimumSize(QtCore.QSize(120, 30))
        self.label_80.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_80.setFont(font)
        self.label_80.setObjectName("label_80")
        self.horizontalLayout_48.addWidget(self.label_80)
        self.lineEdit_STfd = QtWidgets.QLineEdit(self.setting_tab)
        self.lineEdit_STfd.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_STfd.setMaximumSize(QtCore.QSize(16777215, 30))
        self.lineEdit_STfd.setObjectName("lineEdit_STfd")
        self.horizontalLayout_48.addWidget(self.lineEdit_STfd)
        self.Btn_STsf = QtWidgets.QPushButton(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_STsf.sizePolicy().hasHeightForWidth())
        self.Btn_STsf.setSizePolicy(sizePolicy)
        self.Btn_STsf.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_STsf.setMaximumSize(QtCore.QSize(150, 40))
        self.Btn_STsf.setObjectName("Btn_STsf")
        self.horizontalLayout_48.addWidget(self.Btn_STsf)
        spacerItem47 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_48.addItem(spacerItem47)
        self.verticalLayout_21.addLayout(self.horizontalLayout_48)
        self.horizontalLayout_50 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_50.setObjectName("horizontalLayout_50")
        self.label_81 = QtWidgets.QLabel(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_81.sizePolicy().hasHeightForWidth())
        self.label_81.setSizePolicy(sizePolicy)
        self.label_81.setMinimumSize(QtCore.QSize(120, 30))
        self.label_81.setMaximumSize(QtCore.QSize(120, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_81.setFont(font)
        self.label_81.setObjectName("label_81")
        self.horizontalLayout_50.addWidget(self.label_81)
        self.state_STexp = QtWidgets.QLabel(self.setting_tab)
        self.state_STexp.setMinimumSize(QtCore.QSize(150, 0))
        self.state_STexp.setText("")
        self.state_STexp.setObjectName("state_STexp")
        self.horizontalLayout_50.addWidget(self.state_STexp)
        self.Btn_STexp = QtWidgets.QPushButton(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_STexp.sizePolicy().hasHeightForWidth())
        self.Btn_STexp.setSizePolicy(sizePolicy)
        self.Btn_STexp.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_STexp.setMaximumSize(QtCore.QSize(200, 40))
        self.Btn_STexp.setObjectName("Btn_STexp")
        self.horizontalLayout_50.addWidget(self.Btn_STexp)
        spacerItem48 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_50.addItem(spacerItem48)
        self.verticalLayout_21.addLayout(self.horizontalLayout_50)
        self.horizontalLayout_49 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_49.setObjectName("horizontalLayout_49")
        spacerItem49 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_49.addItem(spacerItem49)
        self.Btn_STsc = QtWidgets.QPushButton(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_STsc.sizePolicy().hasHeightForWidth())
        self.Btn_STsc.setSizePolicy(sizePolicy)
        self.Btn_STsc.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_STsc.setMaximumSize(QtCore.QSize(100, 40))
        self.Btn_STsc.setObjectName("Btn_STsc")
        self.horizontalLayout_49.addWidget(self.Btn_STsc)
        self.Btn_STlc = QtWidgets.QPushButton(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_STlc.sizePolicy().hasHeightForWidth())
        self.Btn_STlc.setSizePolicy(sizePolicy)
        self.Btn_STlc.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_STlc.setMaximumSize(QtCore.QSize(100, 40))
        self.Btn_STlc.setObjectName("Btn_STlc")
        self.horizontalLayout_49.addWidget(self.Btn_STlc)
        self.Btn_STap = QtWidgets.QPushButton(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_STap.sizePolicy().hasHeightForWidth())
        self.Btn_STap.setSizePolicy(sizePolicy)
        self.Btn_STap.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_STap.setMaximumSize(QtCore.QSize(100, 40))
        self.Btn_STap.setObjectName("Btn_STap")
        self.horizontalLayout_49.addWidget(self.Btn_STap)
        self.Btn_STcc = QtWidgets.QPushButton(self.setting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_STcc.sizePolicy().hasHeightForWidth())
        self.Btn_STcc.setSizePolicy(sizePolicy)
        self.Btn_STcc.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_STcc.setMaximumSize(QtCore.QSize(100, 40))
        self.Btn_STcc.setObjectName("Btn_STcc")
        self.horizontalLayout_49.addWidget(self.Btn_STcc)
        self.verticalLayout_21.addLayout(self.horizontalLayout_49)
        self.gridLayout_4.addLayout(self.verticalLayout_21, 0, 0, 1, 1)
        self.tabWidget.addTab(self.setting_tab, "")
        self.gridLayout_5.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Tab Action
        self.tabWidget.tabBarClicked.connect(self.tab_clicked)

        # Action Overview
        # Action setting
        self.Btn_STsc.clicked.connect(self.STsc_ck)
        self.Btn_STsf.clicked.connect(self.STsf_ck)
        self.Btn_STap.clicked.connect(self.STap_ck)
        self.Btn_STlc.clicked.connect(self.STlc_ck)
        self.Btn_STcc.clicked.connect(self.STcc_ck)

        # Action generation report
        self.btn_RGcl.clicked.connect(self.RGcl_ck)
        self.btn_RGnt.clicked.connect(self.RGnt_ck)
        self.lineEdit_RGfcp.textChanged.connect(self.RGnt_re)
        self.btn_RGel.clicked.connect(self.RGel_ck)
        self.tableWidget.doubleClicked.connect(self.prev_report)
        self.btn_RGepdf.clicked.connect(self.gen_pdf)

        # Label Overview

        # Check config.json and user config
        config_dir = increment_path(Path('config'), exist_ok= True)  # check dir config folder
        (config_dir).mkdir(parents=True, exist_ok=True)  # make dir
        uconfig_dir = increment_path(Path('uconfig'), exist_ok= True)  # check dir config folder
        (uconfig_dir).mkdir(parents=True, exist_ok=True)  # make dir
        

        # Label Generation Report
        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 100)
        self.tableWidget.setColumnWidth(2, 200)
        self.tableWidget.setColumnWidth(3, 200)
        self.tableWidget.resizeRowsToContents()

        #Calendar
        self.calendarWidget = CalendarWidget(self)
        self.calendarWidget.setWindowTitle("Calendar")
        self.calendarWidget.setObjectName("calendarWidget")

        self.btn_calen = QtWidgets.QDialogButtonBox()
        self.btn_calen.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.btn_calen.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        self.btn_calen.setObjectName("buttonCalendar")
        self.calendarWidget.layout().addWidget(self.btn_calen)

        self.comment_label = QtWidgets.QLabel("กดปุ่ม Shift + วันที่ หรือ ช่วงวันที่")
        self.calendarWidget.layout().addWidget(self.comment_label)
            
        # Label Setting
        f_conf = open(root_p / 'config/current_conf.json')
        self.conf = json.load(f_conf)
        f_conf.close()
        self.lineEdit_STENadr1.setText(self.conf["STENadr1"])
        self.lineEdit_STENadr2.setText(self.conf["STENadr2"])
        self.lineEdit_STENadr3.setText(self.conf["STENadr3"])
        self.lineEdit_STEXadr1.setText(self.conf["STEXadr1"])
        self.lineEdit_STEXadr2.setText(self.conf["STEXadr2"])
        self.lineEdit_STEXadr3.setText(self.conf["STEXadr3"])
        self.lineEdit_STENtr1.setText(self.conf["STENtr1"])
        self.lineEdit_STENtr2.setText(self.conf["STENtr2"])
        self.lineEdit_STENtr3.setText(self.conf["STENtr3"])
        self.lineEdit_STENtr4.setText(self.conf["STENtr4"])
        self.lineEdit_STENtr5.setText(self.conf["STENtr5"])
        self.lineEdit_STEXtr1.setText(self.conf["STEXtr1"])
        self.lineEdit_STEXtr2.setText(self.conf["STEXtr2"])
        self.lineEdit_STEXtr3.setText(self.conf["STEXtr3"])
        self.lineEdit_STEXtr4.setText(self.conf["STEXtr4"])
        self.lineEdit_STEXtr5.setText(self.conf["STEXtr5"])
        self.dest = self.conf["STfd"]
        self.lineEdit_STfd.setText(self.dest)
        self.Enable_setting(False)

        if self.dest != '':
            # create the video capture thread
            self.thread_1 = VideoThread_1()
            self.thread_2 = VideoThread_2()
            self.thread_3 = VideoThread_3()
            self.thread_4 = VideoThread_4()
            self.thread_5 = TimeThread_5()
            self.thread_6 = LogThread_6(self)
            # connect its signal to the update_image slot
            self.thread_1.cam1_pixmap_signal.connect(self.update_image1)
            self.thread_2.cam2_pixmap_signal.connect(self.update_image2)
            self.thread_3.cam3_pixmap_signal.connect(self.update_image3)
            self.thread_4.cam4_pixmap_signal.connect(self.update_image4)
            self.thread_5.dt_signal.connect(self.updateDT)
            self.thread_6.log_signal.connect(self.updateLog)
            # start the thread
            self.thread_1.start()
            self.thread_2.start()
            self.thread_3.start()
            self.thread_4.start()
            self.thread_5.start()
            self.thread_6.start()
            # set priority
            self.thread_1.setPriority(QThread.Priority.HighestPriority)
            self.thread_2.setPriority(QThread.Priority.HighPriority)
            self.thread_3.setPriority(QThread.Priority.NormalPriority)
            self.thread_4.setPriority(QThread.Priority.LowPriority)
            self.thread_5.setPriority(QThread.Priority.LowestPriority)
            self.thread_6.setPriority(QThread.Priority.IdlePriority)

    def Enable_setting(self, Ena):
        if Ena == True:
            self.lineEdit_STENadr1.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
            self.lineEdit_STENadr2.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
            self.lineEdit_STENadr3.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
            self.lineEdit_STEXadr1.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
            self.lineEdit_STEXadr2.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
            self.lineEdit_STEXadr3.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        if Ena == False:
            self.lineEdit_STENadr1.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
            self.lineEdit_STENadr2.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
            self.lineEdit_STENadr3.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
            self.lineEdit_STEXadr1.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
            self.lineEdit_STEXadr2.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
            self.lineEdit_STEXadr3.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)

    def form(self, path):
        my_canvas = canvas.Canvas(path, pagesize = A4)
        
        # Image
        my_canvas.drawImage(str(root_p /'images/TKK_logo.jpg'), 480, 770, width=60, height=50) # Logo  
        my_canvas.drawImage(self.pre_img+'_crop.jpg', 82, 542, width=244, height=144) # Plate

        def draw_paragraph(canvas, msg, x, y, max_width, max_height):
            message_style = ParagraphStyle(
                name='Normal',
                #firstLineIndent = 16,
                fontName = 'THSarabunNew',
                fontSize = 24,
                leading = 30)
            message = msg.replace('\n', '<br />')
            message = Paragraph(message, style=message_style)
            w, h = message.wrap(max_width, max_height)
            message.drawOn(canvas, x, y - h)

        my_canvas.setFont('Times-Bold', 26)
        my_canvas.drawString(150, 740, "TOYOTA Service Report")
        my_canvas.setLineWidth(.2)
        my_canvas.rect(80, 540, 250, 150, stroke=1, fill=0)
        my_canvas.setFont('THSarabunNew', 24)
        my_canvas.drawString(340, 670, 'Date :')
        my_canvas.drawString(400, 670, self.label_RGdt.text())
        my_canvas.drawString(340, 640, 'Time :')
        my_canvas.drawString(400, 640, self.label_RGtm.text())
        my_canvas.drawString(340, 610, 'Plate Number :')
        my_canvas.drawString(470, 610, self.lineEdit_RGcp.text().encode('utf-8'))
        my_canvas.drawString(80, 500, 'Detail :')

        draw_paragraph(my_canvas, self.textEdit_RGrd.toPlainText(), 150, 522, 400, 100)
        
        my_canvas.showPage() # end page
        
        if exists(self.pre_img+'_snap0.jpg') and self.cB_RGsp01.isChecked():
            my_canvas.drawImage(self.pre_img+'_snap0.jpg', 82, 602, width=244, height=144)
        if exists(self.pre_img+'_snap1.jpg') and self.cB_RGsp02.isChecked():
            my_canvas.drawImage(self.pre_img+'_snap1.jpg', 82, 382, width=244, height=144)
        if exists(self.pre_img+'_snap2.jpg') and self.cB_RGsp03.isChecked():
            my_canvas.drawImage(self.pre_img+'_snap2.jpg', 82, 162, width=244, height=144)

        if exists(self.pre_img+'_snap3.jpg') and self.cB_RGsp04.isChecked():
            my_canvas.drawImage(self.pre_img+'_snap3.jpg', 332, 602, width=244, height=144)
        if exists(self.pre_img+'_snap4.jpg') and self.cB_RGsp05.isChecked():
            my_canvas.drawImage(self.pre_img+'_snap4.jpg', 332, 382, width=244, height=144)
        if exists(self.pre_img+'_snap5.jpg') and self.cB_RGsp06.isChecked():
            my_canvas.drawImage(self.pre_img+'_snap5.jpg', 332, 162, width=244, height=144)

        my_canvas.rect(80, 600, 250, 150, stroke=1, fill=0)
        my_canvas.rect(330, 600, 250, 150, stroke=1, fill=0)
        my_canvas.rect(80, 380, 250, 150, stroke=1, fill=0)
        my_canvas.rect(330, 380, 250, 150, stroke=1, fill=0)
        my_canvas.rect(80, 160, 250, 150, stroke=1, fill=0)
        my_canvas.rect(330, 160, 250, 150, stroke=1, fill=0)

        my_canvas.setFillColorCMYK(0.96, 0.55, 0, 0.7) 
        my_canvas.rect(80, 760, 248, 30, stroke=0, fill=1)
        my_canvas.rect(330, 760, 248, 30, stroke=0, fill=1)
        my_canvas.setFillColorRGB(255, 255, 255)
        my_canvas.setFont('Times-Roman', 20)
        my_canvas.drawString(150, 770, 'ENTRANCE')
        my_canvas.drawString(430, 770, 'EXIT')

        my_canvas.setFont('THSarabunNew', 24)
        my_canvas.setFillColorRGB(0, 0, 0)
        msg = 'ตัวรถด้านซ้าย รูปที่: 1'.encode('utf-8')
        my_canvas.drawString(140, 575, msg)
        msg = 'ตัวรถด้านซ้าย รูปที่: 2'.encode('utf-8')
        my_canvas.drawString(140, 355, msg)
        msg = 'ตัวรถด้านซ้าย รูปที่: 3'.encode('utf-8')
        my_canvas.drawString(140, 135, msg)

        my_canvas.setFillColorRGB(0, 0, 0)
        msg = 'ตัวรถด้านขวา รูปที่: 1'.encode('utf-8')
        my_canvas.drawString(390, 575, msg)
        msg = 'ตัวรถด้านขวา รูปที่: 2'.encode('utf-8')
        my_canvas.drawString(390, 355, msg)
        msg = 'ตัวรถด้านขวา รูปที่: 3'.encode('utf-8')
        my_canvas.drawString(390, 135, msg)
        my_canvas.save()
    
    def gen_pdf(self):
        onclk_data = {"Date":'',"Time":'',"Zone":'',"Plate Number":''}
        selected = self.tableWidget.selectedItems()
        if selected:
            for item in selected:
                if item.column() == 0:
                    onclk_data.update({"Date":item.data(0)})
                if item.column() == 1:
                    onclk_data.update({"Time":item.data(0)})
                if item.column() == 2:
                    onclk_data.update({"Zone":item.data(0)})
                if item.column() == 3:
                    onclk_data.update({"Plate Number":item.data(0)})
        time_string = onclk_data["Time"].replace(":", ".")
        file_ex = onclk_data["Date"] + "_" + time_string
        path, ok = QtWidgets.QFileDialog.getSaveFileName(None, 'Save PDF', self.dest +'/'+file_ex, filter = 'PDF(*.pdf)')
        if ok:
            self.form(path)

    def prev_report(self):
        onclk_data = {"Date":'',"Time":'',"Zone":'',"Plate Number":''}
        selected = self.tableWidget.selectedItems()
        if selected:
            for item in selected:
                if item.column() == 0:
                    onclk_data.update({"Date":item.data(0)})
                if item.column() == 1:
                    onclk_data.update({"Time":item.data(0)})
                if item.column() == 2:
                    onclk_data.update({"Zone":item.data(0)})
                if item.column() == 3:
                    onclk_data.update({"Plate Number":item.data(0)})

        self.label_RGdt.setText(onclk_data["Date"])
        self.label_RGtm.setText(onclk_data["Time"])
        self.lineEdit_RGcp.setText(onclk_data["Plate Number"])
        name = (onclk_data["Time"]).replace(':','')
        date = onclk_data["Date"].replace('-','.')
        self.pre_img = self.lineEdit_STfd.text()+'/'+onclk_data["Zone"]+'/'+date+'/'+name+'/'+name
        
        #self.lb_RGsp.setPixmap(QPixmap(pre_img+'_crop.jpg').scaled(320, 182))
        if exists(self.pre_img+'_crop.jpg'):
            self.lb_RGsp.setPixmap(QPixmap(self.pre_img+'_crop.jpg').scaled(320, 182))
        else:self.lb_RGsp.clear()
        if exists(self.pre_img+'_snap0.jpg'):
            self.lb_RGsp01.setPixmap(QPixmap(self.pre_img+'_snap0.jpg').scaled(160, 91))
        else:self.lb_RGsp01.clear()
        if exists(self.pre_img+'_snap1.jpg'):
            self.lb_RGsp02.setPixmap(QPixmap(self.pre_img+'_snap1.jpg').scaled(160, 91))
        else:self.lb_RGsp02.clear()
        if exists(self.pre_img+'_snap2.jpg'):
            self.lb_RGsp03.setPixmap(QPixmap(self.pre_img+'_snap2.jpg').scaled(160, 91))
        else:self.lb_RGsp03.clear()
        if exists(self.pre_img+'_snap3.jpg'):
            self.lb_RGsp04.setPixmap(QPixmap(self.pre_img+'_snap3.jpg').scaled(160, 91))
        else:self.lb_RGsp04.clear()
        if exists(self.pre_img+'_snap4.jpg'):
            self.lb_RGsp05.setPixmap(QPixmap(self.pre_img+'_snap4.jpg').scaled(160, 91))
        else:self.lb_RGsp05.clear()
        if exists(self.pre_img+'_snap5.jpg'):
            self.lb_RGsp06.setPixmap(QPixmap(self.pre_img+'_snap5.jpg').scaled(160, 91))
        else:self.lb_RGsp06.clear()

    def insert_one(self,insert_obj): # Prepare the SQL query
        
        mydb  = pymysql.connect(
            host = self.env_vars["DB_HOST"], 
            user = self.env_vars["DB_USER"], 
            password = self.env_vars["DB_PASSWORD"],
            db = self.env_vars["DB_NAME"])
        
        cursor = mydb.cursor()
        query = "INSERT INTO car (Time, Zone, Num, Date, Model, Type, Color) VALUES (%s, %s, %s, %s, %s, %s, %s)"

        try:
            # Execute the SQL query
            cursor.execute(query, insert_obj)
            mydb.commit()
        except pymysql.Error as e:
            mydb.rollback()
            print(f"Error inserting data: {e}")
            
        cursor.close()
        mydb.close()
    
    def get_FirstDate(self):
        try:
            mydb  = pymysql.connect(
                host = self.env_vars["DB_HOST"], 
                user = self.env_vars["DB_USER"], 
                password = self.env_vars["DB_PASSWORD"], 
                db = self.env_vars["DB_NAME"])
            # Create a cursor object
            cursor = mydb.cursor()
            
            first_date_query = "SELECT DATE_FORMAT(MIN(Date), '%Y.%m.%d') FROM car;"
            cursor.execute(first_date_query)
            first_date = cursor.fetchone()[0]
        finally:
            # Close the cursor and the database connection
            cursor.close()
            mydb.close()
            return first_date
    
    def get_LastDate(self):
        try:
            mydb  = pymysql.connect(
                host = self.env_vars["DB_HOST"], 
                user = self.env_vars["DB_USER"], 
                password = self.env_vars["DB_PASSWORD"], 
                db = self.env_vars["DB_NAME"])
            # Create a cursor object
            cursor = mydb.cursor()
            
            last_date_query = "SELECT DATE_FORMAT(MAX(Date), '%Y.%m.%d') FROM car;"
            cursor.execute(last_date_query)
            last_date = cursor.fetchone()[0]
        finally:
            # Close the cursor and the database connection
            cursor.close()
            mydb.close()
            return last_date
    
    def find_By_Date(self, startdate, enddate):
        try:
            mydb  = pymysql.connect(
                host = self.env_vars["DB_HOST"], 
                user = self.env_vars["DB_USER"], 
                password = self.env_vars["DB_PASSWORD"], 
                db = self.env_vars["DB_NAME"])
            
            # Create a cursor object
            cursor = mydb.cursor()

            # Prepare the SQL query
            query = "SELECT * FROM car WHERE Date >= %s AND Date <= %s ORDER BY Date DESC,Time DESC"

            # Convert start_date and end_date to the appropriate format
            start_date_str = startdate.strftime("%Y-%m-%d")
            end_date_str = enddate.strftime("%Y-%m-%d")

            # Execute the SQL query with the provided start_date and end_date
            cursor.execute(query, (start_date_str, end_date_str))

            # Fetch all the rows returned by the query
            rows = cursor.fetchall()
            
            res_list = []
            
            for row in rows:
                res_list.append(row)
            
            # Return the retrieved rows
            return res_list

        except pymysql.Error as e:
            print(f"Error executing query: {e}")

        finally:
            # Close the cursor and connection when finished
            cursor.close()
            mydb.close()
    
    def get_Count_By_Day(self, startdate, enddate,zone):
        
        try:
            mydb  = pymysql.connect(
                host = self.env_vars["DB_HOST"], 
                user = self.env_vars["DB_USER"], 
                password = self.env_vars["DB_PASSWORD"], 
                db = self.env_vars["DB_NAME"])

            # Create a cursor object
            cursor = mydb.cursor()

            # Prepare the SQL query
            query = "SELECT * FROM car WHERE Date >= %s AND Date <= %s AND Zone = %s"

            # Convert start_date and end_date to the appropriate format
            start_date_str = startdate.strftime("%Y-%m-%d")
            end_date_str = enddate.strftime("%Y-%m-%d")

            # Execute the SQL query with the provided start_date and end_date
            cursor.execute(query, (start_date_str, end_date_str,zone))

            # Fetch all the rows returned by the query
            rows = cursor.fetchall()

            res_list = []

            for row in rows:
                res_list.append(row)

            # Return the retrieved rows
            return len(res_list)

        except pymysql.Error as e:
            print(f"Error executing query: {e}")

        finally:
            # Close the cursor and connection when finished
            cursor.close()
            mydb.close()
    
    def find_plate_no_in_date(self, startdate, enddate,plateNo):
        try:
            mydb  = pymysql.connect(
                host = self.env_vars["DB_HOST"], 
                user = self.env_vars["DB_USER"], 
                password = self.env_vars["DB_PASSWORD"], 
                db = self.env_vars["DB_NAME"])
            
            # Create a cursor object
            cursor = mydb.cursor()

            # Prepare the SQL query
            query = "SELECT * FROM car WHERE Date >= %s AND Date <= %s AND Num LIKE %s ORDER BY Date DESC,Time DESC"

            # Convert start_date and end_date to the appropriate format
            start_date_str = startdate.strftime("%Y-%m-%d")
            end_date_str = enddate.strftime("%Y-%m-%d")

            # Create a pattern for partial string matching
            pattern = f"%{plateNo}%"

            # Execute the SQL query with the provided start_date, end_date, and pattern
            cursor.execute(query, (start_date_str, end_date_str, pattern))

            # Fetch all the rows returned by the query
            rows = cursor.fetchall()

            res_list = []
            
            for row in rows:
                res_list.append(row)
                
            # Return the retrieved rows
            return res_list

        except pymysql.Error as e:
            print(f"Error executing query: {e}")

        finally:
            # Close the cursor and connection when finished
            cursor.close()
            mydb.close()
        
    def RGel_ck(self):
        file_ex = self.cl_date

        path, ok = QtWidgets.QFileDialog.getSaveFileName(None, 'Save CSV', self.dest +'/'+file_ex, filter = 'CSV(*.csv)')
        if ok:
            columns = range(self.tableWidget.columnCount())
            header = [self.tableWidget.horizontalHeaderItem(column).text() for column in columns]
            with open(path, encoding='utf-16', mode='w+') as csvfile:
                writer = csv.writer(csvfile, dialect='excel', lineterminator='\n', delimiter='\t')
                writer.writerow(header)
                
                for row in range(self.tableWidget.rowCount()):
                    writer.writerow(self.tableWidget.item(row, column).text() for column in columns)

    def RGcl_ck(self):
        
        self.calendarWidget.setMinimumDate(QDate(int(self.calendarWidget.first_date[:4]), int(self.calendarWidget.first_date[5:7]), int(self.calendarWidget.first_date[8:10])))
        self.calendarWidget.setMaximumDate(QDate(int(self.calendarWidget.last_date[:4]), int(self.calendarWidget.last_date[5:7]), int(self.calendarWidget.last_date[8:10])))

        # update need in table
        def accept():
            
            if self.calendarWidget.from_date and self.calendarWidget.to_date:
                
                start_date = min(self.calendarWidget.from_date.toPyDate(), self.calendarWidget.to_date.toPyDate())
                end_date = max(self.calendarWidget.from_date.toPyDate(), self.calendarWidget.to_date.toPyDate())
                
                if(start_date == end_date):
                    self.cl_date = str(start_date)
                else:
                    self.cl_date = str(start_date) + " -- " + str(end_date)

                self.start_date_selected = datetime.combine(start_date, datetime.min.time())
                
                self.end_date_selected = datetime.combine(end_date, datetime.max.time())
                
                data_found = self.find_By_Date(self.start_date_selected,self.end_date_selected)
                nrows = len(data_found)
                ncols = 4
                self.tableWidget.setRowCount(nrows)

                for i in range(nrows):
                    time,zone,num,date,model,type,color = data_found[i]
                    for j in range(ncols):
                        if j == 0:
                            data = date.strftime("%Y-%m-%d")  # Format the date as a string
                        elif j == 1:
                            data = (datetime.min + time).strftime("%H:%M:%S")
                        elif j == 2:
                            data = zone
                        elif j == 3:
                            data = num
                        else:
                            data = ''
                        
                        item = QTableWidgetItem(str(data))  # Convert the data to a string
                        self.tableWidget.setItem(i, j, item)
                        
            else:
                self.tableWidget.clear()
                print('No date range is selected')

            self.calendarWidget.close()

        def reject():
            self.calendarWidget.close()

        self.btn_calen.accepted.connect(accept)
        self.btn_calen.rejected.connect(reject)
        self.calendarWidget.show()

    def STcc_ck(self):
        msg = QMessageBox(parent=None)
        msg.setWindowTitle("Warning")
        msg.setText("Your config doesn't save")
        msg.setStandardButtons(QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel)
        msg.exec()

        if msg.result() == QMessageBox.StandardButton.Discard:
            self.setting_tab.setEnabled(False)

    def STlc_ck(self):
        load_dir = QFileDialog.getOpenFileName(None, "Select Folder", str(root_p /'uconfig'), filter ="json (*.json)")[0]

        f_conf = open(load_dir)
        conf = json.load(f_conf)
        f_conf.close()
        
        self.lineEdit_STENadr1.setText(conf["STENadr1"])
        self.lineEdit_STENadr2.setText(conf["STENadr2"])
        self.lineEdit_STENadr3.setText(conf["STENadr3"])
        self.lineEdit_STEXadr1.setText(conf["STEXadr1"])
        self.lineEdit_STEXadr2.setText(conf["STEXadr2"])
        self.lineEdit_STEXadr3.setText(conf["STEXadr3"])
        self.lineEdit_STENtr1.setText(conf["STENtr1"])
        self.lineEdit_STENtr2.setText(conf["STENtr2"])
        self.lineEdit_STENtr3.setText(conf["STENtr3"])
        self.lineEdit_STENtr4.setText(conf["STENtr4"])
        self.lineEdit_STENtr5.setText(conf["STENtr5"])
        self.lineEdit_STEXtr1.setText(conf["STEXtr1"])
        self.lineEdit_STEXtr2.setText(conf["STEXtr2"])
        self.lineEdit_STEXtr3.setText(conf["STEXtr3"])
        self.lineEdit_STEXtr4.setText(conf["STEXtr4"])
        self.lineEdit_STEXtr5.setText(conf["STEXtr5"])
        self.lineEdit_STfd.setText(conf["STfd"])

        msg = QMessageBox(parent=None)
        msg.setWindowTitle("Information")
        msg.setText("Config updated successfully")
        msg.exec()
        
    def STap_ck(self):
        data = {
            "STENadr1": self.lineEdit_STENadr1.text(),
            "STENadr2": self.lineEdit_STENadr2.text(),
            "STENadr3": self.lineEdit_STENadr3.text(),
            "STEXadr1": self.lineEdit_STEXadr1.text(),
            "STEXadr2": self.lineEdit_STEXadr2.text(),
            "STEXadr3": self.lineEdit_STEXadr3.text(),
            "STENtr1": self.lineEdit_STENtr1.text(),
            "STENtr2": self.lineEdit_STENtr2.text(),
            "STENtr3": self.lineEdit_STENtr3.text(),
            "STENtr4": self.lineEdit_STENtr4.text(),
            "STENtr5": self.lineEdit_STENtr5.text(),
            "STEXtr1": self.lineEdit_STEXtr1.text(),
            "STEXtr2": self.lineEdit_STEXtr2.text(),
            "STEXtr3": self.lineEdit_STEXtr3.text(),
            "STEXtr4": self.lineEdit_STEXtr4.text(),
            "STEXtr5": self.lineEdit_STEXtr5.text(),
            "STfd": self.lineEdit_STfd.text()
        }
        with open(str(root_p /'config/current_conf.json'), 'w') as f:
            json.dump(data, f, indent=4)

        msg = QMessageBox(parent=None)
        msg.setWindowTitle("Information")
        msg.setText("Apply was successfully, Please restart program")
        msg.exec()

    def STsf_ck(self):
        save_dir = QFileDialog.getExistingDirectory(None, "Select Folder")
        self.lineEdit_STfd.setText(str(save_dir))

    def STsc_ck(self):
        # check list
        adr_check = [self.lineEdit_STENadr1.text(), self.lineEdit_STENadr2.text(), self.lineEdit_STENadr3.text(),
            self.lineEdit_STEXadr1.text(), self.lineEdit_STEXadr2.text(), self.lineEdit_STEXadr3.text()]
        adr_state = [self.state_STENadr1, self.state_STENadr2, self.state_STENadr3,
            self.state_STEXadr1, self.state_STEXadr2, self.state_STEXadr3]
        digit_check = [self.lineEdit_STENtr1.text(), self.lineEdit_STENtr2.text(), self.lineEdit_STENtr3.text(), self.lineEdit_STENtr4.text(), self.lineEdit_STENtr5.text(),
            self.lineEdit_STEXtr1.text(), self.lineEdit_STEXtr2.text(), self.lineEdit_STEXtr3.text(), self.lineEdit_STEXtr4.text(), self.lineEdit_STEXtr5.text()]
        
        # check NULL
        def check_null(sdr_index):
            if sdr_index == '':return False
            else: return True
        ck_null = bool(1)
        for sdr_index in adr_check:
            ck_null &= check_null(sdr_index)
        for dg_index in digit_check:
            ck_null &= check_null(dg_index)
        if ck_null == False:
            msg = QMessageBox(parent=None)
            msg.setWindowTitle("Warning")
            msg.setText("Please fill all the fields")
            msg.exec()

        # check num
        def check_num(dg_index):
            if dg_index.isdigit():return True
            else: return False
        ck_num = bool(1)
        for dg_index in digit_check:
            ck_num &= check_num(dg_index)
        if ck_num == False:
            msg = QMessageBox(parent=None)
            msg.setWindowTitle("Warning")
            msg.setText("Trigger fields need number")
            msg.exec()

        # check rtsp
        ck_link = bool(1)
        def check_rtsp(i):
            link_index = adr_check[i]
            is_url = link_index.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))

            def ping_server(server: str, port: int, timeout=2):
                """ping server"""
                try:
                    socket.setdefaulttimeout(timeout)
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.connect((server, port))
                except OSError as error:
                    return False
                else:
                    s.close()
                    return True

            if is_url:
                x0 = link_index.find(".")
                x1 = link_index.find(":", x0)
                x2 = link_index.find("/", x1)
                a = link_index[x0-3:x1]
                b = link_index[x1+1:x2]
                test = ping_server(a, int(b))
            else: test = True

            state =""

            if test == True:
                state ="Pass"
                lebel = adr_state[i]
                lebel.setText(state)
                lebel.setStyleSheet("background-color: lightgreen")

            elif test == False:
                state ="Fail"
                lebel = adr_state[i]
                lebel.setText(state) 
                lebel.setStyleSheet("background-color: yellow")
            return test
        for i in range(len(adr_check)):
            ck_link &= check_rtsp(i)

        # save if all pass
        data = {
            "STENadr1": self.lineEdit_STENadr1.text(),
            "STENadr2": self.lineEdit_STENadr2.text(),
            "STENadr3": self.lineEdit_STENadr3.text(),
            "STEXadr1": self.lineEdit_STEXadr1.text(),
            "STEXadr2": self.lineEdit_STEXadr2.text(),
            "STEXadr3": self.lineEdit_STEXadr3.text(),
            "STENtr1": self.lineEdit_STENtr1.text(),
            "STENtr2": self.lineEdit_STENtr2.text(),
            "STENtr3": self.lineEdit_STENtr3.text(),
            "STENtr4": self.lineEdit_STENtr4.text(),
            "STENtr5": self.lineEdit_STENtr5.text(),
            "STEXtr1": self.lineEdit_STEXtr1.text(),
            "STEXtr2": self.lineEdit_STEXtr2.text(),
            "STEXtr3": self.lineEdit_STEXtr3.text(),
            "STEXtr4": self.lineEdit_STEXtr4.text(),
            "STEXtr5": self.lineEdit_STEXtr5.text(),
            "STfd": self.lineEdit_STfd.text()
        }
        
        if (ck_null == True and ck_num == True and ck_link == True):
            # show dialog success
            msg = QMessageBox(parent=None)
            msg.setWindowTitle("Information")
            msg.setText("Configuration saved successfully")
            msg.exec()

            name = QFileDialog.getSaveFileName(None, 'Save File', str(root_p /'uconfig'), filter ="json(*.json)")[0]
            with open(name, 'w') as f:
                json.dump(data, f, indent=4)

        elif (ck_null == False or ck_num == False or ck_link == False):
            msg = QMessageBox(parent=None)
            msg.setWindowTitle("Warning")
            msg.setText("Configuration failed")
            msg.exec()

    def tab_clicked(self, index): # only admin login in setting page
        if index == 1:
            # update last data in table
            self.start_date_selected = datetime.today()
            self.end_date_selected = datetime.today()
            
            self.cl_date = self.start_date_selected.strftime('%Y.%m.%d')
            today_data = self.find_By_Date(self.start_date_selected, self.end_date_selected)
            
            nrows = len(today_data)
            ncols = 4
            self.tableWidget.setRowCount(nrows)

            for i in range(nrows):
                time,zone,num,date,model,type,color = today_data[i]
                for j in range(ncols):
                    if j == 0:
                        data = date.strftime("%Y-%m-%d")  # Format the date as a string
                    elif j == 1:
                        data = (datetime.min + time).strftime("%H:%M:%S")
                    elif j == 2:
                        data = zone
                    elif j == 3:
                        data = num
                    else:
                        data = ''
                    
                    item = QTableWidgetItem(str(data))  # Convert the data to a string
                    self.tableWidget.setItem(i, j, item)

        if index == 2:
            msg = QMessageBox(parent=None)
            msg.setWindowTitle("Please login as Administrators")
            msg.setText("Only administrators can view and configure the Access settings")
            msg.setGeometry(QtCore.QRect(200, 200, 600, 40))

            msgLayout = msg.layout()
            textName = QtWidgets.QLineEdit()
            textName.setPlaceholderText("Please enter username")
            textName.setMinimumSize(QtCore.QSize(200, 0))
            textPass = QtWidgets.QLineEdit()
            textPass.setPlaceholderText("Please enter password")
            textPass.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
            textPass.setMinimumSize(QtCore.QSize(200, 0))

            msgLayout.addWidget(textName)
            msgLayout.addWidget(textPass)
            msg.setStandardButtons(QMessageBox.StandardButton.Yes|QMessageBox.StandardButton.No)

            msg.exec()
            if msg.result() == QMessageBox.StandardButton.Yes:
                if textName.text() == "admin" and textPass.text() == "Admin123":
                    self.Enable_setting(True)
                    self.setting_tab.setEnabled(True)
                else:
                    self.Enable_setting(False)
                    self.setting_tab.setEnabled(False)
                    msg = QMessageBox(parent=None)
                    msg.setWindowTitle("Warning")
                    msg.setText("Invalid username and password")
                    msg.exec()
            elif msg.result() == QMessageBox.StandardButton.No:
                self.Enable_setting(False)
                self.setting_tab.setEnabled(False)

    #Start OpenCV
    def update_image1(self, cv_img):

        #Updates the image_label with a new opencv image
        qt_img = self.convert_cv_qt1(cv_img)
        self.lb_Stm_1.setPixmap(qt_img)
        self.label_OVcp_1.setText(self.thread_1.cam1_ocr) # OCR to Label

        if self.thread_1.cam1_snaps != '':
            self.lb_Sn_11.setPixmap(self.show_img_size(self.thread_1.cam1_snaps))
        if self.thread_1.cam1_snaps_con1 != '':
            self.lb_Sn_12.setPixmap(self.show_img_size(self.thread_1.cam1_snaps_con1))
        if self.thread_1.cam1_snaps_con2 != '':
            self.lb_Sn_13.setPixmap(self.show_img_size(self.thread_1.cam1_snaps_con2))

    def update_image2(self, cv_img):
        #Updates the image_label with a new opencv image
        qt_img = self.convert_cv_qt2(cv_img)
        self.lb_Stm_2.setPixmap(qt_img)
        self.label_OVcp_2.setText(self.thread_2.cam2_ocr) # OCR to Label

        if self.thread_2.cam2_snaps != '':
            self.lb_Sn_21.setPixmap(self.show_img_size(self.thread_2.cam2_snaps))
        if self.thread_2.cam2_snaps_con1 != '':
            self.lb_Sn_22.setPixmap(self.show_img_size(self.thread_2.cam2_snaps_con1))
        if self.thread_2.cam2_snaps_con2 != '':
            self.lb_Sn_23.setPixmap(self.show_img_size(self.thread_2.cam2_snaps_con2))

    def update_image3(self):
        if self.thread_3.cam3_snaps_con3 != '':
            self.lb_Sn_14.setPixmap(self.show_img_size(self.thread_3.cam3_snaps_con3))
        if self.thread_3.cam3_snaps_con4 != '':
            self.lb_Sn_15.setPixmap(self.show_img_size(self.thread_3.cam3_snaps_con4))
        if self.thread_3.cam3_snaps_con5 != '':
            self.lb_Sn_16.setPixmap(self.show_img_size(self.thread_3.cam3_snaps_con5))

    def update_image4(self):
        if self.thread_4.cam4_snaps_con3 != '':
            self.lb_Sn_24.setPixmap(self.show_img_size(self.thread_4.cam4_snaps_con3))
        if self.thread_4.cam4_snaps_con4 != '':
            self.lb_Sn_25.setPixmap(self.show_img_size(self.thread_4.cam4_snaps_con4))
        if self.thread_4.cam4_snaps_con5 != '':
            self.lb_Sn_26.setPixmap(self.show_img_size(self.thread_4.cam4_snaps_con5))

    def show_img_size(self, dir_img):
        dir_img = str(dir_img).replace('\\','/')
        img_change = QPixmap(dir_img)
        img_change = img_change.scaled(160, 91)
        return img_change

    def convert_cv_qt1(self, cv_img):
        #Convert from an opencv image to QPixmap
        #Convert the captured frame into RGB
        cv_img = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = cv_img.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(cv_img.data, w, h, bytes_per_line, QtGui.QImage.Format.Format_RGB888)
        #p = convert_to_Qt_format.scaled(1280, 678, Qt.AspectRatioMode.KeepAspectRatio)
        p = convert_to_Qt_format.scaled(566, 300, Qt.AspectRatioMode.KeepAspectRatioByExpanding)
        return QPixmap.fromImage(p)
    
    def convert_cv_qt2(self, cv_img):
        #Convert from an opencv image to QPixmap
        #Convert the captured frame into RGB
        cv_img = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = cv_img.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(cv_img.data, w, h, bytes_per_line, QtGui.QImage.Format.Format_RGB888)
        #p = convert_to_Qt_format.scaled(1280, 678, Qt.AspectRatioMode.KeepAspectRatio)
        p = convert_to_Qt_format.scaled(566, 300, Qt.AspectRatioMode.KeepAspectRatioByExpanding)
        return QPixmap.fromImage(p)

    #Start date-timer
    def updateDT(self, log_date, current_time):
        self.log_date = log_date
        self.current_time = current_time
        self.label_OVdt.setText(self.log_date)
        self.label_OVtm.setText(self.current_time)
        
    def getEn_Count(self):
        _translate = QtCore.QCoreApplication.translate
        date = datetime.today()
        en_count = self.get_Count_By_Day(date,date, "Entrance")
        self.en_count = en_count
        self.label_29.setText(_translate("MainWindow", f"Count / Day: {en_count}"))
        
    def getEx_Count(self):
        _translate = QtCore.QCoreApplication.translate
        date = datetime.today()
        ex_count = self.get_Count_By_Day(date,date, "Exit")
        self.ex_count = ex_count
        self.label_32.setText(_translate("MainWindow", f"Count / Day: {ex_count}"))
        
    def updateEn_Count(self):
        _translate = QtCore.QCoreApplication.translate
        self.en_count += 1
        self.label_29.setText(_translate("MainWindow", f"Count / Day: {self.en_count}"))
    
    def updateEx_Count(self):
        _translate = QtCore.QCoreApplication.translate
        self.ex_count += 1
        self.label_32.setText(_translate("MainWindow", f"Count / Day: {self.ex_count}"))
        
    def updateEn_PlateNo(self, plateNo):
        _translate = QtCore.QCoreApplication.translate
        self.label_26.setText(_translate("MainWindow", f"Plate No: {plateNo}"))
    
    def updateEx_PlateNo(self, plateNo):
        _translate = QtCore.QCoreApplication.translate
        self.label_31.setText(_translate("MainWindow", f"Plate No: {plateNo}"))

    RGnt = 0
    def RGnt_re(self):
        if not self.lineEdit_RGfcp.text():
            self.RGnt = 0

    def RGnt_ck(self):
        search = self.lineEdit_RGfcp.text()

        data_found = self.find_plate_no_in_date(self.start_date_selected,self.end_date_selected,search)
        nrows = len(data_found)
        ncols = 4
        self.tableWidget.setRowCount(nrows)

        for i in range(nrows):
            time,zone,num,date,model,type,color = data_found[i]
            for j in range(ncols):
                if j == 0:
                    data = date.strftime("%Y-%m-%d")  # Format the date as a string
                elif j == 1:
                    data = (datetime.min + time).strftime("%H:%M:%S")
                elif j == 2:
                    data = zone
                elif j == 3:
                    data = num
                else:
                    data = ''
                
                item = QTableWidgetItem(str(data))  # Convert the data to a string
                self.tableWidget.setItem(i, j, item)

    #Start date-timer
    def updateLog(self):
        """print()"""

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EagleEyes"))
        self.label_16.setText(_translate("MainWindow", "Main Sream: Exit"))
        self.label_18.setText(_translate("MainWindow", "Left"))
        self.label_20.setText(_translate("MainWindow", "Right"))
        self.label_25.setText(_translate("MainWindow", "Exit"))
        self.label_31.setText(_translate("MainWindow", "Plate No:"))
        self.label_33.setText(_translate("MainWindow", "Color:"))
        self.label_30.setText(_translate("MainWindow", "Type:"))
        self.getEn_Count()
        self.label_46.setText(_translate("MainWindow", "Version 1.11 "))
        self.label_15.setText(_translate("MainWindow", "Main Sream: Entrance"))
        self.label_17.setText(_translate("MainWindow", "Left"))
        self.label_19.setText(_translate("MainWindow", "Right"))
        self.label_21.setText(_translate("MainWindow", "Date - Time"))
        self.label_22.setText(_translate("MainWindow", "Date:"))
        self.label_23.setText(_translate("MainWindow", "Time:"))
        self.label_24.setText(_translate("MainWindow", "Entrance"))
        self.label_26.setText(_translate("MainWindow", "Plate No:"))
        self.label_27.setText(_translate("MainWindow", "Color:"))
        self.label_28.setText(_translate("MainWindow", "Type:"))
        self.getEx_Count()
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.overview_tab), _translate("MainWindow", "Overview"))
        self.lineEdit_RGfcp.setPlaceholderText(_translate("MainWindow", "Enter Plate Number here"))
        self.btn_RGnt.setText(_translate("MainWindow", "Search"))
        self.btn_RGel.setText(_translate("MainWindow", "Export log"))
        self.label_34.setText(_translate("MainWindow", "Report Preview"))
        self.label_57.setText(_translate("MainWindow", "Date:"))
        self.label_58.setText(_translate("MainWindow", "Time:"))
        self.label_59.setText(_translate("MainWindow", "Plate No:"))
        self.label_60.setText(_translate("MainWindow", "Detail :"))
        self.textEdit_RGrd.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Times New Roman\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:14pt;\"><br /></p></body></html>"))
        self.btn_RGepdf.setText(_translate("MainWindow", "Save as PDF"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.report_generator_tab), _translate("MainWindow", "Report generator"))
        self.label_61.setText(_translate("MainWindow", "Entrance Configuration"))
        self.label_62.setText(_translate("MainWindow", "LPR address :"))
        self.label_63.setText(_translate("MainWindow", "QC01 address :"))
        self.label_64.setText(_translate("MainWindow", "QC02 address :"))
        self.label_65.setText(_translate("MainWindow", "Trigger 1st"))
        self.label_66.setText(_translate("MainWindow", "Trigger 2nd"))
        self.label_67.setText(_translate("MainWindow", "Trigger 3th"))
        self.label_68.setText(_translate("MainWindow", "Trigger 4th"))
        self.label_69.setText(_translate("MainWindow", "Trigger 5th"))
        self.label_70.setText(_translate("MainWindow", "Entrance Configuration"))
        self.label_78.setText(_translate("MainWindow", "LPR address :"))
        self.label_76.setText(_translate("MainWindow", "QC01 address :"))
        self.label_77.setText(_translate("MainWindow", "QC02 address :"))
        self.label_71.setText(_translate("MainWindow", "Trigger 1st"))
        self.label_72.setText(_translate("MainWindow", "Trigger 2nd"))
        self.label_73.setText(_translate("MainWindow", "Trigger 3th"))
        self.label_74.setText(_translate("MainWindow", "Trigger 4th"))
        self.label_75.setText(_translate("MainWindow", "Trigger 5th"))
        self.label_79.setText(_translate("MainWindow", "User Configuration"))
        self.label_80.setText(_translate("MainWindow", "Save Directory"))
        self.Btn_STsf.setText(_translate("MainWindow", "Select Folder"))
        self.label_81.setText(_translate("MainWindow", "Expires Date:"))
        self.Btn_STexp.setText(_translate("MainWindow", "Select license file"))
        self.Btn_STsc.setText(_translate("MainWindow", "Save"))
        self.Btn_STlc.setText(_translate("MainWindow", "Load"))
        self.Btn_STap.setText(_translate("MainWindow", "Apply"))
        self.Btn_STcc.setText(_translate("MainWindow", "Cancel"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.setting_tab), _translate("MainWindow", "Setting"))

if __name__ == "__main__":
    try:
        # Load environment variables from .env file
        env_vars = dotenv_values(".env")
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow,env_vars)
        MainWindow.show()
        sys.exit(app.exec())
    except:
        sys.exit(0)
